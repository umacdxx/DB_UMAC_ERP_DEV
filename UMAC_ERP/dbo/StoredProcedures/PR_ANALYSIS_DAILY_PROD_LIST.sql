/*
-- 생성자 :	윤현빈
-- 등록일 :	2024.11.11
-- 수정자 : -
-- 수정일 : - 
-- 설 명  : 생산일보
-- 실행문 : EXEC PR_ANALYSIS_DAILY_PROD_LIST '','','','',''
*/
CREATE PROCEDURE [dbo].[PR_ANALYSIS_DAILY_PROD_LIST]
( 
	@P_REPORT_DATE	NVARCHAR(8) = '',	-- 거래처코드
	@P_PARTNER_GB	NVARCHAR(3) = '',	-- 거래처 구분
	@P_TAB_INDEX	NVARCHAR(1) = ''	-- 중분류 코드
)
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	BEGIN TRY 	

		DECLARE @V_ITM_GB NVARCHAR(1);
		DECLARE @V_REPORT_YYYYMM NVARCHAR(6);
		DECLARE @V_CUR_DATE NVARCHAR(8);
		DECLARE @V_YESTERDAY_DATE NVARCHAR(8);
		
		SET @V_REPORT_YYYYMM = LEFT(@P_REPORT_DATE, 6);
		SET @V_CUR_DATE = CONVERT(NVARCHAR, GETDATE(), 112);
		SET @V_YESTERDAY_DATE = CONVERT(NVARCHAR(8), DATEADD(DAY, -1, CAST(@V_CUR_DATE AS DATE)), 112);
		SET @V_ITM_GB = CASE WHEN @P_TAB_INDEX IN ('1', '3', '5', '7') THEN '1' ELSE '3' END;	-- 1: 제품, 3: 부재료

		;

		DECLARE @PAST_DATA TABLE (
			INV_DT NVARCHAR(8),
			SCAN_CODE NVARCHAR(14),
			ITM_NAME NVARCHAR(50),
			ITM_GB NVARCHAR(2),
			R_YN NVARCHAR(1),
			BASE_INV_QTY DECIMAL(15, 2),
			IN_QTY DECIMAL(15, 2),
			OUT_QTY DECIMAL(15, 2),
			RTN_QTY DECIMAL(15, 2),
			INV_ADJ_QTY DECIMAL(15, 2),
			INV_END_QTY DECIMAL(15, 2),
			SORT_ORDER INT
		);

		WITH W_DATA AS (
			SELECT A.INV_DT
					, B.SCAN_CODE
					, A.BASE_INV_QTY
					, CASE WHEN B.ITM_GB = '1' THEN ISNULL(A.PROD_QTY, 0) WHEN B.ITM_GB = '3' THEN ISNULL(A.PUR_QTY, 0) END AS IN_QTY
					, CASE WHEN B.ITM_GB = '1' THEN ISNULL(A.SALE_QTY, 0) WHEN B.ITM_GB = '3' THEN ISNULL(A.PROD_QTY, 0) END AS OUT_QTY
					, A.RTN_QTY
					, A.INV_ADJ_QTY
					, A.INV_END_QTY
				FROM IV_DT_ITEM_COLL AS A
				INNER JOIN CD_PRODUCT_CMN AS B ON A.ITM_CODE = B.ITM_CODE
				WHERE A.INV_DT LIKE @V_REPORT_YYYYMM + '%'
					AND B.ITM_GB = @V_ITM_GB
					AND 1=(CASE WHEN @P_TAB_INDEX = '1' THEN 2 ELSE 1 END)
		), W_R_DATA AS (
			SELECT A.INV_DT
				    , B.SCAN_CODE
					, SUM(A.BASE_INV_QTY) AS BASE_INV_QTY
					, SUM(A.PROD_QTY) AS IN_QTY
					, SUM(A.SALE_QTY) AS OUT_QTY
					, SUM(A.RTN_QTY) AS RTN_QTY
					, SUM(A.INV_ADJ_QTY) AS INV_ADJ_QTY
					, SUM(A.INV_END_QTY) AS INV_END_QTY
				FROM IV_DT_ITEM_LOT_COLL AS A
				INNER JOIN CD_PRODUCT_CMN AS B ON A.ITM_CODE = B.ITM_CODE
				WHERE A.INV_DT LIKE @V_REPORT_YYYYMM + '%'
				    AND RIGHT(A.LOT_NO, 1) = 'R'
					AND B.ITM_GB = '1'
					AND 1=(CASE WHEN @P_TAB_INDEX != '1' THEN 2 ELSE 1 END) -- 페트 제품만
				GROUP BY A.INV_DT, A.ITM_CODE, B.SCAN_CODE
		), W_NO_R_DATA AS (
			SELECT A.INV_DT
				    , B.SCAN_CODE
					, SUM(A.BASE_INV_QTY) AS BASE_INV_QTY
					, SUM(A.PROD_QTY) AS IN_QTY
					, SUM(A.SALE_QTY) AS OUT_QTY
					--, SUM(A.INV_ADJ_QTY) AS OUT_QTY
					, SUM(A.RTN_QTY) AS RTN_QTY
					, SUM(A.INV_ADJ_QTY) AS INV_ADJ_QTY
					, SUM(A.INV_END_QTY) AS INV_END_QTY
				FROM IV_DT_ITEM_LOT_COLL AS A
				INNER JOIN CD_PRODUCT_CMN AS B ON A.ITM_CODE = B.ITM_CODE
				WHERE A.INV_DT LIKE @V_REPORT_YYYYMM + '%'
				    AND RIGHT(A.LOT_NO, 1) != 'R'
					AND B.ITM_GB = '1'
					AND 1=(CASE WHEN @P_TAB_INDEX != '1' THEN 2 ELSE 1 END) -- 페트 제품만
				GROUP BY A.INV_DT, A.ITM_CODE, B.SCAN_CODE
		), W_ITM_SORT_JOIN AS (
			SELECT ISNULL(C.INV_DT, @P_REPORT_DATE) AS INV_DT
					, A.SCAN_CODE
					, B.ITM_NAME
					, B.ITM_GB
					, 'N' AS R_YN
					, ISNULL(C.BASE_INV_QTY, 0) AS BASE_INV_QTY
					, ISNULL(C.IN_QTY, 0) AS IN_QTY
					, ISNULL(C.OUT_QTY, 0) AS OUT_QTY
					, ISNULL(C.RTN_QTY, 0) AS RTN_QTY
					, ISNULL(C.INV_ADJ_QTY, 0) AS INV_ADJ_QTY
					, ISNULL(C.INV_END_QTY, 0) AS INV_END_QTY
					, A.SORT_ORDER
				FROM RP_ITM_SORT AS A
				INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
				LEFT OUTER JOIN W_DATA AS C ON A.SCAN_CODE = C.SCAN_CODE AND C.INV_DT BETWEEN A.START_DATE AND A.END_DATE
				WHERE A.PARTNER_GB = @P_PARTNER_GB
					AND A.ITM_CATEGORY = @P_TAB_INDEX
					AND 1=(CASE WHEN @P_TAB_INDEX != '1' THEN 1 ELSE 2 END) -- 페트 제품만
					AND @P_REPORT_DATE BETWEEN A.START_DATE AND A.END_DATE
			UNION ALL
			SELECT ISNULL(C.INV_DT, @P_REPORT_DATE) AS INV_DT
					, A.SCAN_CODE
					, B.ITM_NAME
					, B.ITM_GB
					, 'Y' AS R_YN
					, ISNULL(C.BASE_INV_QTY, 0) AS BASE_INV_QTY
					, ISNULL(C.IN_QTY, 0) AS IN_QTY
					, ISNULL(C.OUT_QTY, 0) AS OUT_QTY
					, ISNULL(C.RTN_QTY, 0) AS RTN_QTY
					, ISNULL(C.INV_ADJ_QTY, 0) AS INV_ADJ_QTY
					, ISNULL(C.INV_END_QTY, 0) AS INV_END_QTY
					, A.SORT_ORDER
				FROM RP_ITM_SORT AS A
				INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
				LEFT OUTER JOIN W_R_DATA AS C ON A.SCAN_CODE = C.SCAN_CODE AND C.INV_DT BETWEEN A.START_DATE AND A.END_DATE
				WHERE A.PARTNER_GB = @P_PARTNER_GB
					AND A.ITM_CATEGORY = '1'
					AND 1=(CASE WHEN @P_TAB_INDEX != '1' THEN 2 ELSE 1 END) -- 페트 제품만
					AND @P_REPORT_DATE BETWEEN A.START_DATE AND A.END_DATE
			UNION ALL
			SELECT ISNULL(C.INV_DT, @P_REPORT_DATE) AS INV_DT
					, A.SCAN_CODE
					, B.ITM_NAME
					, B.ITM_GB
					, 'N' AS R_YN
					, ISNULL(C.BASE_INV_QTY, 0) AS BASE_INV_QTY
					, ISNULL(C.IN_QTY, 0) AS IN_QTY
					, ISNULL(C.OUT_QTY, 0) AS OUT_QTY
					, ISNULL(C.RTN_QTY, 0) AS RTN_QTY
					, ISNULL(C.INV_ADJ_QTY, 0) AS INV_ADJ_QTY
					, ISNULL(C.INV_END_QTY, 0) AS INV_END_QTY
					, A.SORT_ORDER
				FROM RP_ITM_SORT AS A
				INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
				LEFT OUTER JOIN W_NO_R_DATA AS C ON A.SCAN_CODE = C.SCAN_CODE AND C.INV_DT BETWEEN A.START_DATE AND A.END_DATE
				WHERE A.PARTNER_GB = @P_PARTNER_GB
					AND A.ITM_CATEGORY = '1'
					AND 1=(CASE WHEN @P_TAB_INDEX != '1' THEN 2 ELSE 1 END) -- 페트 제품만
					AND @P_REPORT_DATE BETWEEN A.START_DATE AND A.END_DATE
		)
		INSERT INTO @PAST_DATA
		SELECT * FROM W_ITM_SORT_JOIN
		;

----------------------------------------------------
-- 1. 과거일자 일보 조회
--	PET제품일 때 : R병 처리 해야하기 때문에 LOT별 수불 참조
--	PET제품 아닐 때 : R병 처리 안해도됨, 수불 참조
--	W_DATA: PET제품 아닐 때 사용
--	W_R_DATA, W_NO_R_DATA: PET제품일 때 사용
----------------------------------------------------
		IF @P_REPORT_DATE != CONVERT(NVARCHAR, GETDATE(), 112)
		BEGIN
			WITH W_ACCUM AS (
				SELECT A.*
					 , SUM(A.IN_QTY) OVER(PARTITION BY A.SCAN_CODE, A.R_YN ORDER BY A.INV_DT) AS ACCUM_IN_QTY
					 , SUM(A.OUT_QTY) OVER(PARTITION BY A.SCAN_CODE, A.R_YN ORDER BY A.INV_DT) AS ACCUM_OUT_QTY
					FROM @PAST_DATA AS A
			)
			SELECT ROW_NUMBER() OVER(ORDER BY A.SORT_ORDER, A.R_YN) AS ROW_NUM
					, A.INV_DT AS REPORT_DATE
					, A.SCAN_CODE
					, A.ITM_NAME
                    , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.BASE_INV_QTY) * FLOOR(ABS(A.BASE_INV_QTY) / B.IPSU_QTY) ELSE A.BASE_INV_QTY END AS BASE_INV_QTY
                    , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.IN_QTY) * FLOOR(ABS(A.IN_QTY) / B.IPSU_QTY) ELSE A.IN_QTY END AS IN_QTY
                    , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.OUT_QTY) * FLOOR(ABS(A.OUT_QTY) / B.IPSU_QTY) ELSE A.OUT_QTY END AS OUT_QTY
                    , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.ACCUM_IN_QTY) * FLOOR(ABS(A.ACCUM_IN_QTY) / B.IPSU_QTY) ELSE A.ACCUM_IN_QTY END AS ACCUM_IN_QTY
                    , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.ACCUM_OUT_QTY) * FLOOR(ABS(A.ACCUM_OUT_QTY) / B.IPSU_QTY) ELSE A.ACCUM_OUT_QTY END AS ACCUM_OUT_QTY
                    , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.RTN_QTY) * FLOOR(ABS(A.RTN_QTY) / B.IPSU_QTY) ELSE A.RTN_QTY END AS RTN_QTY
                    , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.INV_ADJ_QTY) * FLOOR(ABS(A.INV_ADJ_QTY) / B.IPSU_QTY) ELSE A.INV_ADJ_QTY END AS INV_ADJ_QTY
                    , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.INV_END_QTY) * FLOOR(ABS(A.INV_END_QTY) / B.IPSU_QTY) ELSE  A.INV_END_QTY END AS INV_END_QTY

					, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.BASE_INV_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS BASE_INV_EA
					, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.IN_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS IN_EA
					, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.OUT_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS OUT_EA
					, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.ACCUM_IN_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS ACCUM_IN_EA
					, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.ACCUM_OUT_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS ACCUM_OUT_EA
					, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.RTN_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS RTN_EA
					, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.INV_ADJ_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS INV_ADJ_EA
					, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.INV_END_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS INV_END_EA

					, @P_PARTNER_GB AS PARTNER_GB
					, D.CD_NM AS PARTNER_GB_NM
					, @P_TAB_INDEX AS ITM_CATEGORY
					, E.CD_NM AS ITM_CATEGORY_NM
					, A.R_YN AS R_YN
					, ISNULL(C.REMARKS, '') AS REMARKS
		    
				   FROM W_ACCUM AS A
				   INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
				   --LEFT OUTER JOIN RP_ANALYSIS_DAILY_PROD AS C ON A.INV_DT = C.REPORT_DATE AND @P_PARTNER_GB = C.PARTNER_GB AND @P_TAB_INDEX = C.ITM_CATEGORY AND A.SCAN_CODE = C.SCAN_CODE
				   --LEFT OUTER JOIN W_MAX_REMARKS AS C ON A.SCAN_CODE = C.SCAN_CODE AND A.R_YN = C.R_YN
				   LEFT OUTER JOIN RP_ANALYSIS_DAILY_PROD AS C ON LEFT(A.INV_DT, 6) = LEFT(C.REPORT_MON, 6) AND @P_PARTNER_GB = C.PARTNER_GB AND @P_TAB_INDEX = C.ITM_CATEGORY AND A.SCAN_CODE = C.SCAN_CODE AND A.R_YN = C.R_YN
				   LEFT OUTER JOIN TBL_COMM_CD_MST AS D ON D.CD_CL = 'PARTNER_GB' AND D.CD_ID = @P_PARTNER_GB
				   LEFT OUTER JOIN TBL_COMM_CD_MST AS E ON E.CD_CL = 'ITM_CATEGORY' AND E.CD_ID = @P_TAB_INDEX
				  WHERE A.INV_DT = @P_REPORT_DATE
			;
		END

		ELSE
		BEGIN
----------------------------------------------------
-- 2. 금일 일보 조회 (PET제품 아닐 때)
--	PET제품일 때 : R병 처리 해야하기 때문에 LOT별 수불 참조
--	PET제품 아닐 때 : R병 처리 안해도됨, 수불 참조
----------------------------------------------------
			IF @P_TAB_INDEX != '1'
			BEGIN
				WITH W_CAP_DATA AS (
					SELECT A.PROD_DT
						 , A.SCAN_CODE
						 , A.COMP_CODE
						 , A.INPUT_QTY
						 , SUM(A.INPUT_QTY) OVER(PARTITION BY A.COMP_CODE ORDER BY A.PROD_DT) AS CUM_LUTEN_INPUT_QTY
						 , SUM(A.INPUT_QTY) OVER(PARTITION BY A.SCAN_CODE, A.COMP_CODE ORDER BY A.PROD_DT) AS CUM_LABEL_INPUT_QTY
						FROM PD_MAT_USAGE AS A
					   WHERE YYYYMM = LEFT(@V_CUR_DATE, 6)
						 AND PROD_DT <= @V_CUR_DATE
						 AND MAT_GB = '1'
				), W_EMPTY_BOX_DATA AS (
					SELECT A.PROD_DT
						 , A.SCAN_CODE
						 , A.COMP_CODE
						 , A.INPUT_QTY
						 , SUM(A.INPUT_QTY) OVER(PARTITION BY A.COMP_CODE ORDER BY A.PROD_DT) AS EMPTY_BOX_INPUT_QTY
						FROM PD_MAT_USAGE AS A
					   WHERE PROD_DT = @V_CUR_DATE
						 AND MAT_GB = '5'
				), W_CAN_DATA AS (
					SELECT A.PROD_DT
						 , A.SCAN_CODE
						 , C.CD_ID AS COMP_CODE
						 , A.PROD_APP_QTY AS PROD_QTY
						 , CAST(ROUND(A.PROD_APP_QTY / C.MGMT_ENTRY_3, 0) AS INT) AS INPUT_QTY
						FROM CD_LOT_MST AS A
						INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
						INNER JOIN TBL_COMM_CD_MST AS C ON B.MID_CODE = C.MGMT_ENTRY_1 AND B.UNIT_CAPACITY = C.MGMT_ENTRY_2 AND C.CD_CL = 'MAPPING_CAN_PAD' AND DEL_YN = 'N'
					   WHERE PROD_DT = @V_CUR_DATE
						 AND A.CFM_FLAG = 'Y'
				), W_LUTEN as (
					SELECT A.PROD_DT
						 , B.MGMT_ENTRY_1 AS COMP_CODE
						 , CAST(ROUND(A.CUM_LUTEN_INPUT_QTY / CAST(B.MGMT_ENTRY_DESCRIPTION_1 AS DECIMAL), 0) - COALESCE(LAG(ROUND(A.CUM_LUTEN_INPUT_QTY / CAST(B.MGMT_ENTRY_DESCRIPTION_1 AS DECIMAL), 0)) 
						   OVER (PARTITION BY A.COMP_CODE ORDER BY A.PROD_DT), 0) AS INT) AS INPUT_QTY
						FROM W_CAP_DATA AS A
						INNER JOIN TBL_COMM_CD_MST AS B ON A.COMP_CODE = B.CD_ID AND B.CD_CL = 'MAPPING_CAP_LUTEN' AND DEL_YN = 'N'
				), W_LABEL AS (
					SELECT A.PROD_DT
						 , B.MGMT_ENTRY_1 AS COMP_CODE
						 , CAST(ROUND(A.CUM_LABEL_INPUT_QTY / CAST(B.MGMT_ENTRY_DESCRIPTION_1 AS DECIMAL), 0) - COALESCE(LAG(ROUND(A.CUM_LABEL_INPUT_QTY / CAST(B.MGMT_ENTRY_DESCRIPTION_1 AS DECIMAL), 0)) 
						   OVER (PARTITION BY A.SCAN_CODE, A.COMP_CODE ORDER BY A.PROD_DT), 0) AS INT) AS INPUT_QTY
						FROM W_CAP_DATA AS A
						INNER JOIN TBL_COMM_CD_MST AS B ON A.SCAN_CODE = B.CD_ID AND B.CD_CL = 'MAPPING_CAP_LABEL' AND DEL_YN = 'N'
				), W_PAD AS (
					SELECT A.PROD_DT
						 , A.COMP_CODE
						 , INPUT_QTY
						FROM W_CAN_DATA AS A
				), W_MAT_USAGE AS (
					SELECT * FROM W_LUTEN AS A WHERE A.PROD_DT = @V_CUR_DATE
					UNION ALL
					SELECT * FROM W_LABEL AS A WHERE A.PROD_DT = @V_CUR_DATE
					UNION ALL
					SELECT * FROM W_PAD AS A WHERE A.PROD_DT = @V_CUR_DATE
				), 
		
				W_DATA AS (
			-- ************************************************************
			-- 1. 전일 재고 : 전 일자 기말재고 
			-- ************************************************************
					SELECT A.ITM_CODE AS ITM_CODE
						 , A.BASE_INV_QTY
						 , 0 AS PUR_QTY, 0 AS SALE_QTY, 0 AS PROD_QTY, 0 AS RTN_QTY, 0 AS INV_ADJ_QTY
						FROM (
							SELECT A.ITM_CODE						-- 관리 코드
								 , A.INV_END_QTY AS BASE_INV_QTY	-- 전 일자 기말 재고 수량			
								FROM IV_DT_ITEM_COLL AS A
							   WHERE A.INV_DT = @V_YESTERDAY_DATE
						) AS A
					UNION ALL
			-- ************************************************************
			-- 2. 입고(매입)
			-- 매입확정 시 수불처리
			-- ************************************************************
					SELECT A.ITM_CODE AS ITM_CODE, 0 AS BASE_INV_QTY
						 , A.PUR_QTY
						 , 0 AS SALE_QTY, 0 AS PROD_QTY, 0 AS RTN_QTY, 0 AS INV_ADJ_QTY
						FROM (
							SELECT C.ITM_CODE											-- 관리 코드
								 , ISNULL(SUM(B.PUR_QTY), 0) AS PUR_QTY					-- 입고(매입)수량
								FROM PO_PURCHASE_HDR AS A 
								INNER JOIN PO_PURCHASE_DTL AS B ON A.ORD_NO = B.ORD_NO
								INNER JOIN CD_PRODUCT_CMN AS C ON B.SCAN_CODE = C.SCAN_CODE
							   WHERE A.DELIVERY_IN_DT = @V_CUR_DATE
								 AND A.PUR_STAT IN ('35', '40') -- 매입확정
							   GROUP BY C.ITM_CODE
						) AS A
					UNION ALL
			-- ************************************************************
			-- 3. 매출(-)
			-- 매출확정 시 수불처리
			-- 박스 상품은 단품 상품으로 치환
			-- ************************************************************
					SELECT A.ITM_CODE AS ITM_CODE, 0 AS BASE_INV_QTY, 0 AS PUR_QTY
						 , A.SALE_QTY
						 , 0 AS PROD_QTY, 0 AS RTN_QTY, 0 AS INV_ADJ_QTY
						FROM (
							SELECT CASE WHEN C.ITM_FORM = '2' AND D.BOX_CODE IS NOT NULL THEN ISNULL(D.ITM_CODE, C.ITM_CODE) ELSE C.ITM_CODE END AS ITM_CODE	-- 관리 코드
								 , CASE WHEN C.ITM_FORM = '2' AND D.BOX_CODE IS NOT NULL THEN ISNULL(SUM(B.PICKING_QTY * ISNULL(D.IPSU_QTY, 1)), 0) * (-1) ELSE ISNULL(SUM(B.PICKING_QTY), 0) * (-1) END AS SALE_QTY							-- 매출수량 [-]
								FROM PO_ORDER_HDR AS A
								INNER JOIN VIEW_ORDER_DTL_SAMPLE_SUM AS B ON A.ORD_NO = B.ORD_NO
								INNER JOIN CD_PRODUCT_CMN AS C ON B.SCAN_CODE = C.SCAN_CODE
								LEFT OUTER JOIN CD_BOX_MST AS D ON C.ITM_CODE = D.BOX_CODE
							   WHERE A.DELIVERY_DEC_DT = @V_CUR_DATE
								 AND A.ORD_STAT IN ('35', '40') -- 매출확정
								 AND A.ORD_GB = '1'
							   GROUP BY (CASE WHEN C.ITM_FORM = '2' AND D.BOX_CODE IS NOT NULL THEN ISNULL(D.ITM_CODE, C.ITM_CODE) ELSE C.ITM_CODE END), C.ITM_FORM, D.BOX_CODE
						) AS A
					UNION ALL
			-- ************************************************************
			-- 4. 생산
			-- ************************************************************
					SELECT A.ITM_CODE AS ITM_CODE, 0 AS BASE_INV_QTY, 0 AS PUR_QTY, 0 AS SALE_QTY
						 , A.PROD_QTY
						 , 0 AS RTN_QTY, 0 AS INV_ADJ_QTY
						FROM (
							SELECT A.ITM_CODE
								 , SUM(PROD_QTY) AS PROD_QTY
								FROM (
									-- 제품 생산
									SELECT B.ITM_CODE					-- 관리 코드
										 , A.PROD_APP_QTY AS PROD_QTY	-- 생산 수량
										FROM CD_LOT_MST AS A
										INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
									   WHERE A.PROD_DT = @V_CUR_DATE
										 AND A.CFM_FLAG = 'Y'
									UNION ALL
									-- 제품 생산(BOM)
									SELECT B.ITM_CODE					-- 관리 코드
										 , SUM(A.COMP_APP_QTY) AS PROD_QTY 	-- 생산 수량
										FROM PD_BOM_SET_HIST AS A
										INNER JOIN CD_PRODUCT_CMN AS B ON A.BOM_SET_COMP_CD = B.SCAN_CODE
									   WHERE A.PROD_DT = @V_CUR_DATE
										 AND A.CFM_FLAG = 'Y'
									   GROUP BY B.ITM_CODE
									-- 제품 생산(SET)
									UNION ALL
									--SELECT B.ITM_CODE					-- 관리 코드
									--	 , SUM(A.PROD_QTY) AS PROD_QTY 	-- 생산 수량
									--	FROM PD_SET_RESULT_PROD AS A
									--	INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
									--   WHERE A.PROD_DT = @V_CUR_DATE
									--   GROUP BY B.ITM_CODE
									--UNION ALL
									---- 제품 생산(SET BOM)
									--SELECT B.ITM_CODE					-- 관리 코드
									--	 , SUM(A.COMP_QTY) AS PROD_QTY 	-- 생산 수량
									--	FROM PD_SET_RESULT_COMP AS A
									--	INNER JOIN CD_PRODUCT_CMN AS B ON A.SET_COMP_CD = B.SCAN_CODE
									--   WHERE A.PROD_DT = @V_CUR_DATE
									--	 AND A.RESTORE_YN = 'N'
									--   GROUP BY B.ITM_CODE
									--UNION ALL
									-- 부자재 사용(루뎅, 띠라벨, 패드)
									SELECT B.ITM_CODE
										 , SUM(A.INPUT_QTY) * (-1) AS PROD_QTY
										FROM W_MAT_USAGE AS A
										INNER JOIN CD_PRODUCT_CMN AS B ON A.COMP_CODE = B.SCAN_CODE
									   GROUP BY B.ITM_CODE
									UNION ALL
									-- 부자재 사용(공박스)
									SELECT B.ITM_CODE
										 , SUM(A.INPUT_QTY) * (-1) AS PROD_QTY
										FROM W_EMPTY_BOX_DATA AS A
										INNER JOIN CD_PRODUCT_CMN AS B ON A.COMP_CODE = B.SCAN_CODE
									   GROUP BY B.ITM_CODE
								) AS A
								GROUP BY A.ITM_CODE
						) AS A

					UNION ALL
			-- ************************************************************
			-- 5. 매출반품(+)
			-- ************************************************************
					SELECT A.ITM_CODE AS ITM_CODE, 0 AS BASE_INV_QTY, 0 AS PUR_QTY, 0 AS SALE_QTY, 0 AS PROD_QTY
						 , A.RTN_QTY AS RTN_QTY
						 , 0 AS INV_ADJ_QTY
						FROM (
							SELECT CASE WHEN C.ITM_FORM = '2' AND D.BOX_CODE IS NOT NULL THEN ISNULL(D.ITM_CODE, C.ITM_CODE) ELSE C.ITM_CODE END AS ITM_CODE	-- 관리 코드
								 , CASE WHEN C.ITM_FORM = '2' AND D.BOX_CODE IS NOT NULL THEN ISNULL(SUM(B.PICKING_QTY * ISNULL(D.IPSU_QTY, 1)), 0) ELSE ISNULL(SUM(B.PICKING_QTY), 0) END AS RTN_QTY
								FROM PO_ORDER_HDR AS A
								INNER JOIN VIEW_ORDER_DTL_SAMPLE_SUM AS B ON A.ORD_NO = B.ORD_NO
								INNER JOIN CD_PRODUCT_CMN AS C ON B.SCAN_CODE = C.SCAN_CODE
								LEFT OUTER JOIN CD_BOX_MST AS D ON C.ITM_CODE = D.BOX_CODE
							   WHERE A.DELIVERY_DEC_DT = @V_CUR_DATE
								 AND A.ORD_STAT IN ('35', '40') -- 매출확정
								 AND A.ORD_GB = '2'
							   GROUP BY (CASE WHEN C.ITM_FORM = '2' AND D.BOX_CODE IS NOT NULL THEN ISNULL(D.ITM_CODE, C.ITM_CODE) ELSE C.ITM_CODE END), C.ITM_FORM, D.BOX_CODE
						) AS A
					UNION ALL
			-- ************************************************************
			-- 6. 재고조정(+,-)
			-- ************************************************************
					SELECT A.ITM_CODE AS ITM_CODE, 0 AS BASE_INV_QTY, 0 AS PUR_QTY, 0 AS SALE_QTY, 0 AS PROD_QTY, 0 AS RTN_QTY
						 , A.INV_ADJ_QTY
						FROM (
							SELECT CASE WHEN B.ITM_FORM = '2' THEN ISNULL(C.ITM_CODE, A.ITM_CODE) ELSE A.ITM_CODE END AS ITM_CODE
								 , CASE WHEN B.ITM_FORM = '2' THEN ISNULL(SUM(A.APP_QTY * ISNULL(C.IPSU_QTY, 1)), 0) ELSE ISNULL(SUM(A.APP_QTY), 0) END AS INV_ADJ_QTY
								FROM IV_STOCK_ADJUST AS A
								INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
								LEFT OUTER JOIN CD_BOX_MST AS C ON A.ITM_CODE = C.BOX_CODE
							   WHERE A.INV_DT = @V_CUR_DATE
								 AND A.CFM_FLAG = 'Y'
								 AND A.SEQ=(CASE WHEN A.INV_GB = '99' THEN (SELECT MAX(SEQ) FROM IV_STOCK_ADJUST AS T WHERE T.INV_DT = A.INV_DT AND T.ITM_CODE = A.ITM_CODE AND T.LOT_NO = A.LOT_NO AND T.INV_GB = '99') ELSE A.SEQ END )
							   GROUP BY (CASE WHEN B.ITM_FORM = '2' THEN ISNULL(C.ITM_CODE, A.ITM_CODE) ELSE A.ITM_CODE END), B.ITM_FORM
						) AS A
				), W_TODAY_COLL_DATA AS (
					SELECT @V_CUR_DATE AS INV_DT
						 , ITM_CODE
						 , SUM(BASE_INV_QTY) AS BASE_INV_QTY	-- 전일 재고 수량
						 , SUM(PUR_QTY) AS PUR_QTY				-- 매입 수량
						 , SUM(SALE_QTY) AS SALE_QTY			-- 매출[-] 수량
						 , SUM(PROD_QTY) AS PROD_QTY			-- 생산 수량
						 , SUM(RTN_QTY) AS RTN_QTY				-- 매입반품[-] 수량
						 , SUM(INV_ADJ_QTY) AS INV_ADJ_QTY		-- 재고조정[+,-] 수량
						 , SUM(BASE_INV_QTY) + SUM(PUR_QTY) + SUM(SALE_QTY) + SUM(PROD_QTY) + SUM(RTN_QTY) + SUM(INV_ADJ_QTY) AS INV_END_QTY		-- 기말 재고 수량
						FROM W_DATA
					   GROUP BY ITM_CODE
				), W_REPORT_DATA AS (
					SELECT A.INV_DT
						 , B.SCAN_CODE
						 , A.BASE_INV_QTY
						 , CASE WHEN B.ITM_GB = '1' THEN ISNULL(A.PROD_QTY, 0) WHEN B.ITM_GB = '3' THEN ISNULL(A.PUR_QTY, 0) END AS IN_QTY
						 , CASE WHEN B.ITM_GB = '1' THEN ISNULL(A.SALE_QTY, 0) WHEN B.ITM_GB = '3' THEN ISNULL(A.PROD_QTY, 0) END AS OUT_QTY
						 , A.RTN_QTY
						 , A.INV_ADJ_QTY
						 , A.INV_END_QTY
						FROM W_TODAY_COLL_DATA AS A
						INNER JOIN CD_PRODUCT_CMN AS B ON A.ITM_CODE = B.ITM_CODE
					   WHERE A.INV_DT LIKE @V_REPORT_YYYYMM + '%'
						 AND B.ITM_GB = @V_ITM_GB
				), W_ITM_SORT_JOIN AS (
					SELECT C.INV_DT
						 , A.SCAN_CODE
						 , B.ITM_NAME
						 , B.ITM_GB
						 , ISNULL(C.BASE_INV_QTY, 0) AS BASE_INV_QTY
						 , ISNULL(C.IN_QTY, 0) AS IN_QTY
						 , ISNULL(C.OUT_QTY, 0) AS OUT_QTY
						 , ISNULL(C.RTN_QTY, 0) AS RTN_QTY
						 , ISNULL(C.INV_ADJ_QTY, 0) AS INV_ADJ_QTY
						 , ISNULL(C.INV_END_QTY, 0) AS INV_END_QTY
						 , A.SORT_ORDER
						FROM RP_ITM_SORT AS A
						INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
						LEFT OUTER JOIN W_REPORT_DATA AS C ON A.SCAN_CODE = C.SCAN_CODE AND C.INV_DT BETWEEN A.START_DATE AND A.END_DATE
					   WHERE A.PARTNER_GB = @P_PARTNER_GB
						 AND A.ITM_CATEGORY = @P_TAB_INDEX
					UNION ALL
					SELECT A.INV_DT
					     , A.SCAN_CODE
					     , A.ITM_NAME
					     , A.ITM_GB
					     , A.BASE_INV_QTY
					     , A.IN_QTY
					     , A.OUT_QTY
					     , A.RTN_QTY
					     , A.INV_ADJ_QTY
					     , A.INV_END_QTY
					     , A.SORT_ORDER
						FROM @PAST_DATA AS A
				), W_ACCUM AS (
					SELECT A.*
					     , 'N' AS R_YN
						 , SUM(A.IN_QTY) OVER(PARTITION BY A.SCAN_CODE ORDER BY A.INV_DT) AS ACCUM_IN_QTY
						 , SUM(A.OUT_QTY) OVER(PARTITION BY A.SCAN_CODE ORDER BY A.INV_DT) AS ACCUM_OUT_QTY
						FROM W_ITM_SORT_JOIN AS A
				)
				 SELECT ROW_NUMBER() OVER(ORDER BY A.SORT_ORDER, A.SCAN_CODE, A.INV_DT) AS ROW_NUM
						, A.INV_DT AS REPORT_DATE
						, A.SCAN_CODE
						, A.ITM_NAME
						, CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.BASE_INV_QTY) * FLOOR(ABS(A.BASE_INV_QTY) / B.IPSU_QTY) ELSE A.BASE_INV_QTY END AS BASE_INV_QTY
						, CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.IN_QTY) * FLOOR(ABS(A.IN_QTY) / B.IPSU_QTY) ELSE A.IN_QTY END AS IN_QTY
						, CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.OUT_QTY) * FLOOR(ABS(A.OUT_QTY) / B.IPSU_QTY) ELSE A.OUT_QTY END AS OUT_QTY
						, CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.ACCUM_IN_QTY) * FLOOR(ABS(A.ACCUM_IN_QTY) / B.IPSU_QTY) ELSE A.ACCUM_IN_QTY END AS ACCUM_IN_QTY
						, CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.ACCUM_OUT_QTY) * FLOOR(ABS(A.ACCUM_OUT_QTY) / B.IPSU_QTY) ELSE A.ACCUM_OUT_QTY END AS ACCUM_OUT_QTY
						, CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(ISNULL(A.RTN_QTY, 0)) * FLOOR(ABS(CAST(ISNULL(A.RTN_QTY, 0) AS DECIMAL)) / B.IPSU_QTY) ELSE CAST(ISNULL(A.RTN_QTY, 0) AS DECIMAL) END AS RTN_QTY
						, CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.INV_END_QTY) * FLOOR(ABS(A.INV_END_QTY) / B.IPSU_QTY) ELSE A.INV_END_QTY END AS INV_END_QTY
						, CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.INV_ADJ_QTY) * FLOOR(ABS(A.INV_ADJ_QTY) / B.IPSU_QTY) ELSE A.INV_ADJ_QTY END AS INV_ADJ_QTY
						
						, 0 AS BASE_INV_EA
						, 0 AS IN_EA
						, 0 AS OUT_EA
						, 0 AS ACCUM_IN_EA
						, 0 AS ACCUM_OUT_EA
						, 0 AS RTN_EA
						, 0 AS INV_ADJ_EA
						, 0 AS INV_END_EA

						, @P_PARTNER_GB AS PARTNER_GB
						, D.CD_NM AS PARTNER_GB_NM
						, @P_TAB_INDEX AS ITM_CATEGORY
						, E.CD_NM AS ITM_CATEGORY_NM
						, A.R_YN AS R_YN
						, ISNULL(C.REMARKS, '') AS REMARKS
					   FROM W_ACCUM AS A
					   INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
					   --LEFT OUTER JOIN RP_ANALYSIS_DAILY_PROD AS C ON A.INV_DT = C.REPORT_DATE AND @P_PARTNER_GB = C.PARTNER_GB AND @P_TAB_INDEX = C.ITM_CATEGORY AND A.SCAN_CODE = C.SCAN_CODE
					   --LEFT OUTER JOIN W_MAX_REMARKS AS C ON A.SCAN_CODE = C.SCAN_CODE AND A.R_YN = C.R_YN
					   LEFT OUTER JOIN RP_ANALYSIS_DAILY_PROD AS C ON LEFT(A.INV_DT, 6) = LEFT(C.REPORT_MON, 6) AND @P_PARTNER_GB = C.PARTNER_GB AND @P_TAB_INDEX = C.ITM_CATEGORY AND A.SCAN_CODE = C.SCAN_CODE AND A.R_YN = C.R_YN
					   LEFT OUTER JOIN TBL_COMM_CD_MST AS D ON D.CD_CL = 'PARTNER_GB' AND D.CD_ID = @P_PARTNER_GB
					   LEFT OUTER JOIN TBL_COMM_CD_MST AS E ON E.CD_CL = 'ITM_CATEGORY' AND E.CD_ID = @P_TAB_INDEX
					  WHERE A.INV_DT = @P_REPORT_DATE
				;
			END
			
----------------------------------------------------
-- 3. 금일 일보 조회 (PET제품일 때)
--	PET제품일 때 : R병 처리 해야하기 때문에 LOT별 수불 참조
--	PET제품 아닐 때 : R병 처리 안해도됨, 수불 참조
----------------------------------------------------
			ELSE
			BEGIN
				WITH W_CAP_DATA AS (
					SELECT A.PROD_DT
						 , A.SCAN_CODE
						 , A.COMP_CODE
						 , A.INPUT_QTY
						 --, SUM(A.INPUT_QTY) OVER(PARTITION BY A.COMP_CODE ORDER BY A.PROD_DT) AS CUM_INPUT_QTY
						 , SUM(A.INPUT_QTY) OVER(PARTITION BY A.COMP_CODE ORDER BY A.PROD_DT) AS CUM_LUTEN_INPUT_QTY
						 , SUM(A.INPUT_QTY) OVER(PARTITION BY A.SCAN_CODE, A.COMP_CODE ORDER BY A.PROD_DT) AS CUM_LABEL_INPUT_QTY
						FROM PD_MAT_USAGE AS A
					   WHERE YYYYMM = LEFT(@V_CUR_DATE, 6)
						 AND PROD_DT <= @V_CUR_DATE
						 AND MAT_GB = '1'
				), W_EMPTY_BOX_DATA AS (
					SELECT A.PROD_DT
						 , A.SCAN_CODE
						 , A.COMP_CODE
						 , A.INPUT_QTY
						 , SUM(A.INPUT_QTY) OVER(PARTITION BY A.COMP_CODE ORDER BY A.PROD_DT) AS EMPTY_BOX_INPUT_QTY
						FROM PD_MAT_USAGE AS A
					   WHERE PROD_DT = @V_CUR_DATE
						 AND MAT_GB = '5'
				), W_CAN_DATA AS (
					SELECT A.PROD_DT
						 , A.SCAN_CODE
						 , C.CD_ID AS COMP_CODE
						 , A.PROD_APP_QTY AS PROD_QTY
						 , CAST(ROUND(A.PROD_APP_QTY / C.MGMT_ENTRY_3, 0) AS INT) AS INPUT_QTY
						FROM CD_LOT_MST AS A
						INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
						INNER JOIN TBL_COMM_CD_MST AS C ON B.MID_CODE = C.MGMT_ENTRY_1 AND B.UNIT_CAPACITY = C.MGMT_ENTRY_2 AND C.CD_CL = 'MAPPING_CAN_PAD' AND DEL_YN = 'N'
					   WHERE PROD_DT = @V_CUR_DATE
						 AND A.CFM_FLAG = 'Y'
				), W_LUTEN as (
					SELECT A.PROD_DT
						 , B.MGMT_ENTRY_1 AS COMP_CODE
						 , CAST(ROUND(A.CUM_LUTEN_INPUT_QTY / CAST(B.MGMT_ENTRY_DESCRIPTION_1 AS DECIMAL), 0) - COALESCE(LAG(ROUND(A.CUM_LUTEN_INPUT_QTY / CAST(B.MGMT_ENTRY_DESCRIPTION_1 AS DECIMAL), 0)) 
						   OVER (PARTITION BY A.COMP_CODE ORDER BY A.PROD_DT), 0) AS INT) AS INPUT_QTY
						FROM W_CAP_DATA AS A
						INNER JOIN TBL_COMM_CD_MST AS B ON A.COMP_CODE = B.CD_ID AND B.CD_CL = 'MAPPING_CAP_LUTEN' AND DEL_YN = 'N'
				), W_LABEL AS (
					SELECT A.PROD_DT
						 , B.MGMT_ENTRY_1 AS COMP_CODE
						 , CAST(ROUND(A.CUM_LABEL_INPUT_QTY / CAST(B.MGMT_ENTRY_DESCRIPTION_1 AS DECIMAL), 0) - COALESCE(LAG(ROUND(A.CUM_LABEL_INPUT_QTY / CAST(B.MGMT_ENTRY_DESCRIPTION_1 AS DECIMAL), 0)) 
						   OVER (PARTITION BY A.SCAN_CODE, A.COMP_CODE ORDER BY A.PROD_DT), 0) AS INT) AS INPUT_QTY
						FROM W_CAP_DATA AS A
						INNER JOIN TBL_COMM_CD_MST AS B ON A.SCAN_CODE = B.CD_ID AND B.CD_CL = 'MAPPING_CAP_LABEL' AND DEL_YN = 'N'
				), W_PAD AS (
					SELECT A.PROD_DT
						 , A.COMP_CODE
						 , INPUT_QTY
						FROM W_CAN_DATA AS A
				), W_MAT_USAGE AS (
					SELECT * FROM W_LUTEN AS A WHERE A.PROD_DT = @V_CUR_DATE
					UNION ALL
					SELECT * FROM W_LABEL AS A WHERE A.PROD_DT = @V_CUR_DATE
					UNION ALL
					SELECT * FROM W_PAD AS A WHERE A.PROD_DT = @V_CUR_DATE
				), 
		
				W_LOT_DATA AS (
			-- ************************************************************
			-- 1. 전일 재고 : 전 일자 기말재고 
			-- ************************************************************
					SELECT A.ITM_CODE AS ITM_CODE, A.LOT_NO
						 , A.BASE_INV_QTY
						 , 0 AS PUR_QTY, 0 AS SALE_QTY, 0 AS PROD_QTY, 0 AS RTN_QTY, 0 AS INV_ADJ_QTY
						FROM (
							SELECT A.ITM_CODE						-- 관리 코드
								 , A.LOT_NO
								 , A.INV_END_QTY AS BASE_INV_QTY	-- 전 일자 기말 재고 수량			
								FROM IV_DT_ITEM_LOT_COLL AS A
							   WHERE A.INV_DT = @V_YESTERDAY_DATE
						) AS A
					UNION ALL
			-- ************************************************************
			-- 2. 입고(매입)
			-- 매입확정 시 수불처리
			-- #매입은 lot가 없어서 처리 안함
			-- ************************************************************
					SELECT A.ITM_CODE AS ITM_CODE, A.LOT_NO, 0 AS BASE_INV_QTY
						 , A.PUR_QTY
						 , 0 AS SALE_QTY, 0 AS PROD_QTY, 0 AS RTN_QTY, 0 AS INV_ADJ_QTY
						FROM (
							SELECT C.ITM_CODE											-- 관리 코드
								 , '' AS LOT_NO
								 , ISNULL(SUM(B.PUR_QTY), 0) AS PUR_QTY					-- 입고(매입)수량
								FROM PO_PURCHASE_HDR AS A 
								INNER JOIN PO_PURCHASE_DTL AS B ON A.ORD_NO = B.ORD_NO
								INNER JOIN CD_PRODUCT_CMN AS C ON B.SCAN_CODE = C.SCAN_CODE
							   WHERE A.DELIVERY_IN_DT = @V_CUR_DATE
								 AND A.PUR_STAT IN ('35', '40') -- 매입확정
							   GROUP BY C.ITM_CODE
						) AS A
					UNION ALL
			-- ************************************************************
			-- 3. 매출(-)
			-- 매출확정 시 수불처리
			-- 박스 상품은 단품 상품으로 치환
			-- ************************************************************
					SELECT A.ITM_CODE AS ITM_CODE, A.LOT_NO, 0 AS BASE_INV_QTY, 0 AS PUR_QTY
						 , A.SALE_QTY
						 , 0 AS PROD_QTY, 0 AS RTN_QTY, 0 AS INV_ADJ_QTY
						FROM (
							SELECT CASE WHEN C.ITM_FORM = '2' AND D.BOX_CODE IS NOT NULL THEN ISNULL(D.ITM_CODE, C.ITM_CODE) ELSE C.ITM_CODE END AS ITM_CODE	-- 관리 코드
								 , CASE WHEN C.ITM_FORM = '2' AND D.BOX_CODE IS NOT NULL THEN ISNULL(E.LOT_NO, '') ELSE ISNULL(E.LOT_NO, '') END AS LOT_NO		-- LOT_NO
								 , CASE WHEN C.ITM_FORM = '2' AND D.BOX_CODE IS NOT NULL THEN ISNULL(SUM(ISNULL(E.PICKING_QTY, B.PICKING_QTY) * ISNULL(D.IPSU_QTY, 1)), 0) * (-1) ELSE ISNULL(SUM(ISNULL(E.PICKING_QTY, B.PICKING_QTY)), 0) * (-1) END AS SALE_QTY							-- 매출수량 [-]
								FROM PO_ORDER_HDR AS A
								INNER JOIN (
									SELECT A.ORD_NO
										 , A.SCAN_CODE
										 , SUM(A.PICKING_QTY) AS PICKING_QTY
									FROM (
										SELECT A.ORD_NO
											 , A.SCAN_CODE
											 , A.PICKING_QTY
										  FROM PO_ORDER_DTL AS A
										UNION ALL
										SELECT B.ORD_NO
											 , B.SCAN_CODE
											 , B.PICKING_QTY
										  FROM PO_ORDER_SAMPLE AS B
									) AS A
									GROUP BY A.ORD_NO, A.SCAN_CODE
								) AS B ON A.ORD_NO = B.ORD_NO
								INNER JOIN CD_PRODUCT_CMN AS C ON B.SCAN_CODE = C.SCAN_CODE
								LEFT OUTER JOIN PO_ORDER_LOT AS E ON B.ORD_NO = E.ORD_NO AND B.SCAN_CODE = E.SCAN_CODE
								LEFT OUTER JOIN CD_BOX_MST AS D ON C.ITM_CODE = D.BOX_CODE
								--LEFT OUTER JOIN CD_PRODUCT_CMN AS F ON D.ITM_CODE = F.ITM_CODE
								--LEFT OUTER JOIN PO_ORDER_LOT AS G ON B.ORD_NO = G.ORD_NO AND F.SCAN_CODE = G.SCAN_CODE
							   WHERE A.DELIVERY_DEC_DT = @V_CUR_DATE
								 AND A.ORD_STAT IN ('35', '40') -- 매출확정
								 AND A.ORD_GB = '1'
							   GROUP BY (CASE WHEN C.ITM_FORM = '2' AND D.BOX_CODE IS NOT NULL THEN ISNULL(D.ITM_CODE, C.ITM_CODE) ELSE C.ITM_CODE END), C.ITM_FORM, D.BOX_CODE, ISNULL(E.LOT_NO, '')
						) AS A
					UNION ALL
			-- ************************************************************
			-- 4. 생산
			-- ************************************************************
					SELECT A.ITM_CODE AS ITM_CODE, A.LOT_NO, 0 AS BASE_INV_QTY, 0 AS PUR_QTY, 0 AS SALE_QTY
						 , A.PROD_QTY
						 , 0 AS RTN_QTY, 0 AS INV_ADJ_QTY
						FROM (
							SELECT A.ITM_CODE
								 , A.LOT_NO
								 , SUM(A.PROD_QTY) AS PROD_QTY
								FROM (
									-- 제품 생산
									SELECT B.ITM_CODE					-- 관리 코드
										 , A.LOT_NO						-- LOT_NO
										 , A.PROD_APP_QTY AS PROD_QTY	-- 생산 수량
										FROM CD_LOT_MST AS A
										INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
									   WHERE A.PROD_DT = @V_CUR_DATE
										 AND A.CFM_FLAG = 'Y'
									UNION ALL
									-- 제품 생산(BOM)
									SELECT B.ITM_CODE						-- 관리 코드
										 , A.LOT_NO							-- LOT_NO
										 , SUM(A.COMP_APP_QTY) AS PROD_QTY 	-- 생산 수량
										FROM PD_BOM_SET_HIST AS A
										INNER JOIN CD_PRODUCT_CMN AS B ON A.BOM_SET_COMP_CD = B.SCAN_CODE
									   WHERE A.PROD_DT = @V_CUR_DATE
										 AND A.CFM_FLAG = 'Y'
									   GROUP BY B.ITM_CODE, A.LOT_NO
									UNION ALL
									-- 제품 생산(SET BOM)
									--SELECT B.ITM_CODE					-- 관리 코드
									--	 , ISNULL(A.LOT_NO, '') AS LOT_NO						-- LOT_NO
									--	 , SUM(A.COMP_QTY) AS PROD_QTY 	-- 생산 수량
									--	FROM PD_SET_RESULT_COMP AS A
									--	INNER JOIN CD_PRODUCT_CMN AS B ON A.SET_COMP_CD = B.SCAN_CODE
									--   WHERE A.PROD_DT = @V_CUR_DATE
									--	 AND A.RESTORE_YN = 'N'
									--   GROUP BY B.ITM_CODE, A.LOT_NO
									--UNION ALL
									-- 부자재 사용(루뎅, 띠라벨, 패드)
									SELECT B.ITM_CODE
										 , '' AS LOT_NO
										 , SUM(A.INPUT_QTY) * (-1) AS PROD_QTY
										FROM W_MAT_USAGE AS A
										INNER JOIN CD_PRODUCT_CMN AS B ON A.COMP_CODE = B.SCAN_CODE
									   GROUP BY B.ITM_CODE
									UNION ALL
									-- 부자재 사용(공박스)
									SELECT B.ITM_CODE
										 , '' AS LOT_NO
										 , SUM(A.INPUT_QTY) * (-1) AS PROD_QTY
										FROM W_EMPTY_BOX_DATA AS A
										INNER JOIN CD_PRODUCT_CMN AS B ON A.COMP_CODE = B.SCAN_CODE
									   GROUP BY B.ITM_CODE
								) AS A
							   GROUP BY A.ITM_CODE, A.LOT_NO
						) AS A

					UNION ALL
			-- ************************************************************
			-- 5. 매출반품(+)
			-- ************************************************************
					SELECT A.ITM_CODE AS ITM_CODE, A.LOT_NO, 0 AS BASE_INV_QTY, 0 AS PUR_QTY, 0 AS SALE_QTY, 0 AS PROD_QTY
						 , A.RTN_QTY AS RTN_QTY
						 , 0 AS INV_ADJ_QTY
						FROM (
							SELECT CASE WHEN C.ITM_FORM = '2' AND D.BOX_CODE IS NOT NULL THEN ISNULL(D.ITM_CODE, C.ITM_CODE) ELSE C.ITM_CODE END AS ITM_CODE	-- 관리 코드
								 , ISNULL(E.LOT_NO, '') AS LOT_NO
								 , CASE WHEN C.ITM_FORM = '2' AND D.BOX_CODE IS NOT NULL THEN ISNULL(SUM(B.PICKING_QTY * ISNULL(D.IPSU_QTY, 1)), 0) ELSE ISNULL(SUM(B.PICKING_QTY), 0) END AS RTN_QTY
								FROM PO_ORDER_HDR AS A
								INNER JOIN VIEW_ORDER_DTL_SAMPLE_SUM AS B ON A.ORD_NO = B.ORD_NO
								INNER JOIN CD_PRODUCT_CMN AS C ON B.SCAN_CODE = C.SCAN_CODE
								LEFT OUTER JOIN CD_BOX_MST AS D ON C.ITM_CODE = D.BOX_CODE
								LEFT OUTER JOIN PO_ORDER_LOT AS E ON B.ORD_NO = E.ORD_NO AND B.SCAN_CODE = E.SCAN_CODE
							   WHERE A.DELIVERY_DEC_DT = @V_CUR_DATE
								 AND A.ORD_STAT IN ('35', '40') -- 매출확정
								 AND A.ORD_GB = '2'
							   GROUP BY (CASE WHEN C.ITM_FORM = '2' AND D.BOX_CODE IS NOT NULL THEN ISNULL(D.ITM_CODE, C.ITM_CODE) ELSE C.ITM_CODE END), C.ITM_FORM, D.BOX_CODE, ISNULL(E.LOT_NO, '')
						) AS A
					UNION ALL
			-- ************************************************************
			-- 6. 재고조정(+,-)
			-- ************************************************************
					SELECT A.ITM_CODE AS ITM_CODE, A.LOT_NO, 0 AS BASE_INV_QTY, 0 AS PUR_QTY, 0 AS SALE_QTY, 0 AS PROD_QTY, 0 AS RTN_QTY
						 , A.INV_ADJ_QTY
						FROM (
							SELECT CASE WHEN B.ITM_FORM = '2' THEN ISNULL(C.ITM_CODE, A.ITM_CODE) ELSE A.ITM_CODE END AS ITM_CODE
								 , A.LOT_NO
								 , CASE WHEN B.ITM_FORM = '2' THEN ISNULL(SUM(A.APP_QTY * ISNULL(C.IPSU_QTY, 1)), 0) ELSE ISNULL(SUM(A.APP_QTY), 0) END AS INV_ADJ_QTY
								FROM IV_STOCK_ADJUST AS A
								INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
								LEFT OUTER JOIN CD_BOX_MST AS C ON A.ITM_CODE = C.BOX_CODE
							   WHERE A.INV_DT = @V_CUR_DATE
								 AND A.CFM_FLAG = 'Y'
								 AND A.SEQ=(CASE WHEN A.INV_GB = '99' THEN (SELECT MAX(SEQ) FROM IV_STOCK_ADJUST AS T WHERE T.INV_DT = A.INV_DT AND T.ITM_CODE = A.ITM_CODE AND T.LOT_NO = A.LOT_NO AND T.INV_GB = '99') ELSE A.SEQ END )
							   GROUP BY (CASE WHEN B.ITM_FORM = '2' THEN ISNULL(C.ITM_CODE, A.ITM_CODE) ELSE A.ITM_CODE END), B.ITM_FORM, A.LOT_NO
						) AS A
				), W_TODAY_COLL_DATA AS (
					SELECT @V_CUR_DATE AS INV_DT
						 , ITM_CODE
						 , SUM(BASE_INV_QTY) AS BASE_INV_QTY	-- 전일 재고 수량
						 , SUM(PUR_QTY) AS PUR_QTY				-- 매입 수량
						 , SUM(SALE_QTY) AS SALE_QTY			-- 매출[-] 수량
						 , SUM(PROD_QTY) AS PROD_QTY			-- 생산 수량
						 , SUM(RTN_QTY) AS RTN_QTY				-- 매입반품[-] 수량
						 , SUM(INV_ADJ_QTY) AS INV_ADJ_QTY		-- 재고조정[+,-] 수량
						 , SUM(BASE_INV_QTY) + SUM(PUR_QTY) + SUM(SALE_QTY) + SUM(PROD_QTY) + SUM(RTN_QTY) + SUM(INV_ADJ_QTY) AS INV_END_QTY		-- 기말 재고 수량
						FROM W_LOT_DATA
					   WHERE RIGHT(LOT_NO, 1) != 'R'
					   GROUP BY ITM_CODE
				), W_TODAY_COLL_R_DATA AS (
					SELECT @V_CUR_DATE AS INV_DT
						 , ITM_CODE
						 , SUM(BASE_INV_QTY) AS BASE_INV_QTY	-- 전일 재고 수량
						 , SUM(PUR_QTY) AS PUR_QTY				-- 매입 수량
						 , SUM(SALE_QTY) AS SALE_QTY			-- 매출[-] 수량
						 , SUM(PROD_QTY) AS PROD_QTY			-- 생산 수량
						 , SUM(RTN_QTY) AS RTN_QTY				-- 매입반품[-] 수량
						 , SUM(INV_ADJ_QTY) AS INV_ADJ_QTY		-- 재고조정[+,-] 수량
						 , SUM(BASE_INV_QTY) + SUM(PUR_QTY) + SUM(SALE_QTY) + SUM(PROD_QTY) + SUM(RTN_QTY) + SUM(INV_ADJ_QTY) AS INV_END_QTY		-- 기말 재고 수량
						FROM W_LOT_DATA
					   WHERE RIGHT(LOT_NO, 1) = 'R'
					   GROUP BY ITM_CODE
				), W_REPORT_DATA AS (
					SELECT A.INV_DT
						 , B.SCAN_CODE
						 , A.BASE_INV_QTY
						 , CASE WHEN B.ITM_GB = '1' THEN ISNULL(A.PROD_QTY, 0) WHEN B.ITM_GB = '3' THEN ISNULL(A.PUR_QTY, 0) END AS IN_QTY
						 , CASE WHEN B.ITM_GB = '1' THEN ISNULL(A.SALE_QTY, 0) WHEN B.ITM_GB = '3' THEN ISNULL(A.PROD_QTY, 0) END AS OUT_QTY
						 , A.RTN_QTY
						 , A.INV_ADJ_QTY
						 , A.INV_END_QTY
						FROM W_TODAY_COLL_DATA AS A
						INNER JOIN CD_PRODUCT_CMN AS B ON A.ITM_CODE = B.ITM_CODE
					   WHERE A.INV_DT LIKE @V_REPORT_YYYYMM + '%'
						 AND B.ITM_GB = @V_ITM_GB
				), W_REPORT_R_DATA AS (
					SELECT A.INV_DT
						 , B.SCAN_CODE
						 , A.BASE_INV_QTY
						 , A.PROD_QTY AS IN_QTY
						 , A.INV_ADJ_QTY AS OUT_QTY
						 , A.RTN_QTY
						 , A.INV_ADJ_QTY
						 , A.INV_END_QTY
						FROM W_TODAY_COLL_R_DATA AS A
						INNER JOIN CD_PRODUCT_CMN AS B ON A.ITM_CODE = B.ITM_CODE
					   WHERE A.INV_DT LIKE @V_REPORT_YYYYMM + '%'
						 AND B.ITM_GB = @V_ITM_GB
				), W_ITM_SORT_JOIN AS (
					SELECT C.INV_DT
						 , A.SCAN_CODE
						 , B.ITM_NAME
						 , B.ITM_GB
						 , 'N' AS R_YN
						 , ISNULL(C.BASE_INV_QTY, 0) AS BASE_INV_QTY
						 , ISNULL(C.IN_QTY, 0) AS IN_QTY
						 , ISNULL(C.OUT_QTY, 0) AS OUT_QTY
						 , ISNULL(C.RTN_QTY, 0) AS RTN_QTY
						 , ISNULL(C.INV_ADJ_QTY, 0) AS INV_ADJ_QTY
						 , ISNULL(C.INV_END_QTY, 0) AS INV_END_QTY
						 , A.SORT_ORDER
						FROM RP_ITM_SORT AS A
						INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
						LEFT OUTER JOIN W_REPORT_DATA AS C ON A.SCAN_CODE = C.SCAN_CODE AND C.INV_DT BETWEEN A.START_DATE AND A.END_DATE
					   WHERE A.PARTNER_GB = @P_PARTNER_GB
						 AND A.ITM_CATEGORY = @P_TAB_INDEX
					UNION ALL
					SELECT ISNULL(C.INV_DT, @V_CUR_DATE) AS INV_DT
						 , A.SCAN_CODE
						 , B.ITM_NAME
						 , B.ITM_GB
						 , 'Y' AS R_YN
						 , ISNULL(C.BASE_INV_QTY, 0) AS BASE_INV_QTY
						 , ISNULL(C.IN_QTY, 0) AS IN_QTY
						 , ISNULL(C.OUT_QTY, 0) AS OUT_QTY
						 , ISNULL(C.RTN_QTY, 0) AS RTN_QTY
						 , ISNULL(C.INV_ADJ_QTY, 0) AS INV_ADJ_QTY
						 , ISNULL(C.INV_END_QTY, 0) AS INV_END_QTY
						 , A.SORT_ORDER
						FROM RP_ITM_SORT AS A
						INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
						LEFT OUTER JOIN W_REPORT_R_DATA AS C ON A.SCAN_CODE = C.SCAN_CODE AND C.INV_DT BETWEEN A.START_DATE AND A.END_DATE
					   WHERE A.PARTNER_GB = @P_PARTNER_GB
						 AND A.ITM_CATEGORY = @P_TAB_INDEX
					UNION ALL
					SELECT A.INV_DT
					     , A.SCAN_CODE
					     , A.ITM_NAME
					     , A.ITM_GB
						 , A.R_YN
					     , A.BASE_INV_QTY
					     , A.IN_QTY
					     , A.OUT_QTY
					     , A.RTN_QTY
					     , A.INV_ADJ_QTY
					     , A.INV_END_QTY
					     , A.SORT_ORDER
						FROM @PAST_DATA AS A
				), W_GROUP_DATA AS (
					SELECT INV_DT, SCAN_CODE, ITM_NAME, ITM_GB, R_YN, SORT_ORDER
					     , SUM(BASE_INV_QTY) AS BASE_INV_QTY
					     , SUM(IN_QTY) AS IN_QTY
					     , SUM(OUT_QTY) AS OUT_QTY
					     , SUM(RTN_QTY) AS RTN_QTY
					     , SUM(INV_ADJ_QTY) AS INV_ADJ_QTY
					     , SUM(INV_END_QTY) AS INV_END_QTY
						FROM W_ITM_SORT_JOIN
					   GROUP BY INV_DT, SCAN_CODE, ITM_NAME, ITM_GB, R_YN, SORT_ORDER
				), W_ACCUM AS (
					SELECT A.*
						 , SUM(A.IN_QTY) OVER(PARTITION BY A.SCAN_CODE, A.R_YN ORDER BY A.INV_DT) AS ACCUM_IN_QTY
						 , SUM(A.OUT_QTY) OVER(PARTITION BY A.SCAN_CODE, A.R_YN ORDER BY A.INV_DT) AS ACCUM_OUT_QTY
						FROM W_GROUP_DATA AS A
				)
				--, W_MAX_REMARKS AS (
				--	SELECT A.SCAN_CODE
				--		 , A.R_YN
				--		 , A.REMARKS
				--		FROM RP_ANALYSIS_DAILY_PROD AS A
				--		INNER JOIN (
				--			SELECT B.SCAN_CODE
				--				 , B.R_YN
				--				 , MAX(B.REPORT_DATE) AS MAX_REPORT_DATE
				--				FROM RP_ANALYSIS_DAILY_PROD AS B
				--			   WHERE LEFT(B.REPORT_DATE, 6) = @V_REPORT_YYYYMM
				--				 AND B.REPORT_DATE <= @P_REPORT_DATE
				--				 AND B.PARTNER_GB = @P_PARTNER_GB
				--				 AND B.ITM_CATEGORY = @P_TAB_INDEX
				--			   GROUP BY B.SCAN_CODE, B.R_YN
				--		) AS B ON A.SCAN_CODE = B.SCAN_CODE  AND A.REPORT_DATE = B.MAX_REPORT_DATE AND A.R_YN = B.R_YN
				--	   WHERE A.PARTNER_GB = @P_PARTNER_GB
				--		 AND A.ITM_CATEGORY = @P_TAB_INDEX
				--		 AND B.MAX_REPORT_DATE <= @P_REPORT_DATE
				-- ) 
				 SELECT ROW_NUMBER() OVER(ORDER BY A.SORT_ORDER, A.R_YN) AS ROW_NUM
						, A.INV_DT AS REPORT_DATE
						, A.SCAN_CODE
						, A.ITM_NAME
                        , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.BASE_INV_QTY) * FLOOR(ABS(A.BASE_INV_QTY) / B.IPSU_QTY) ELSE A.BASE_INV_QTY END AS BASE_INV_QTY
                        , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.IN_QTY) * FLOOR(ABS(A.IN_QTY) / B.IPSU_QTY) ELSE A.IN_QTY END AS IN_QTY
                        , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.OUT_QTY) * FLOOR(ABS(A.OUT_QTY) / B.IPSU_QTY) ELSE A.OUT_QTY END AS OUT_QTY
                        , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.ACCUM_IN_QTY) * FLOOR(ABS(A.ACCUM_IN_QTY) / B.IPSU_QTY) ELSE A.ACCUM_IN_QTY END AS ACCUM_IN_QTY
                        , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.ACCUM_OUT_QTY) * FLOOR(ABS(A.ACCUM_OUT_QTY) / B.IPSU_QTY) ELSE A.ACCUM_OUT_QTY END AS ACCUM_OUT_QTY
                        , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(ISNULL(A.RTN_QTY, 0)) * FLOOR(ABS(CAST(ISNULL(A.RTN_QTY, 0) AS DECIMAL)) / B.IPSU_QTY) ELSE CAST(ISNULL(A.RTN_QTY, 0) AS DECIMAL) END AS RTN_QTY
                        , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.INV_END_QTY) * FLOOR(ABS(A.INV_END_QTY) / B.IPSU_QTY) ELSE A.INV_END_QTY END AS INV_END_QTY
                        , CASE WHEN @P_TAB_INDEX = '1' THEN SIGN(A.INV_ADJ_QTY) * FLOOR(ABS(A.INV_ADJ_QTY) / B.IPSU_QTY) ELSE A.INV_ADJ_QTY END AS INV_ADJ_QTY

						, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.BASE_INV_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS BASE_INV_EA
						, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.IN_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS IN_EA
						, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.OUT_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS OUT_EA
						, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.ACCUM_IN_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS ACCUM_IN_EA
						, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.ACCUM_OUT_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS ACCUM_OUT_EA
						, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.RTN_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS RTN_EA
						, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.INV_ADJ_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS INV_ADJ_EA
						, CASE WHEN @P_TAB_INDEX = '1' THEN CAST(A.INV_END_QTY % B.IPSU_QTY AS INT) ELSE 0 END AS INV_END_EA

						, @P_PARTNER_GB AS PARTNER_GB
						, D.CD_NM AS PARTNER_GB_NM
						, @P_TAB_INDEX AS ITM_CATEGORY
						, E.CD_NM AS ITM_CATEGORY_NM
						, A.R_YN AS R_YN
						, ISNULL(C.REMARKS, '') AS REMARKS
					   FROM W_ACCUM AS A
					   INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
					   --LEFT OUTER JOIN RP_ANALYSIS_DAILY_PROD AS C ON A.INV_DT = C.REPORT_DATE AND @P_PARTNER_GB = C.PARTNER_GB AND @P_TAB_INDEX = C.ITM_CATEGORY AND A.SCAN_CODE = C.SCAN_CODE
					   --LEFT OUTER JOIN W_MAX_REMARKS AS C ON A.SCAN_CODE = C.SCAN_CODE AND A.R_YN = C.R_YN
					   LEFT OUTER JOIN RP_ANALYSIS_DAILY_PROD AS C ON LEFT(A.INV_DT, 6) = LEFT(C.REPORT_MON, 6) AND @P_PARTNER_GB = C.PARTNER_GB AND @P_TAB_INDEX = C.ITM_CATEGORY AND A.SCAN_CODE = C.SCAN_CODE AND A.R_YN = C.R_YN
					   LEFT OUTER JOIN TBL_COMM_CD_MST AS D ON D.CD_CL = 'PARTNER_GB' AND D.CD_ID = @P_PARTNER_GB
					   LEFT OUTER JOIN TBL_COMM_CD_MST AS E ON E.CD_CL = 'ITM_CATEGORY' AND E.CD_ID = @P_TAB_INDEX
					  WHERE A.INV_DT = @P_REPORT_DATE
				;
			END
		END
		;

	END TRY
	
	BEGIN CATCH		
		--에러 로그 테이블 저장
		INSERT INTO TBL_ERROR_LOG 
		SELECT ERROR_PROCEDURE()	-- 프로시저명
		, ERROR_MESSAGE()			-- 에러메시지
		, ERROR_LINE()				-- 에러라인
		, GETDATE()	
	END CATCH
	
END

GO

