/*
-- 생성자 :	강세미
-- 등록일 :	2024.06.18
-- 수정자 : 2024.07.30 강세미 - LOT 피킹수량 수정, 재고처리
			2024.09.11 최수민 - 집계 수량, 금액 수정
			2024.11.28 최수민 - 집계용 주문번호 추출
-- 설 명  : 매출입내역수정 > 저장
-- 실행문 : 
EXEC PR_SALES_UPDATE '[{
"GUBUN": "D",
"LOT_NO": "20240808-CA-DS-210049",
"ORD_NO": "2240909002",
"QTY": "50",
"REMARKS_SALES": "",
"SALE_PRC": 91839,
"SALE_VAT": 9184,
"SCAN_CODE": "8801052728469",
"TOTAL_AMT": 5051150
}]', 'admin'
EXEC PR_SALES_UPDATE '[{
"GUBUN": "D",
"LOT_NO": "",
"ORD_NO": "1240927112",
"QTY": "18900",
"REMARKS_SALES": "",
"SALE_PRC": 180,
"SALE_VAT": 18,
"SCAN_CODE": "8801052728469",
"TOTAL_AMT": 5051150
}]', 'admin'
EXEC PR_SALES_UPDATE '[{
    "ORD_NO": "2240911004",
    "SCAN_CODE": "8807596330007",
    "ITM_NAME": "생활가득 콩식용유 18L",
    "ORD_QTY": 120,
    "QTY": 60,
    "BEFO_QTY": 60,
    "SALE_PRC": 0,
    "SALE_VAT": 0,
    "SALE_AMT": 0,
    "TOTAL_AMT": 0,
    "REMARKS_SALES": null,
    "WEIGHT_GB": "QTY",
    "TAX_GB": "1",
    "LOT_NO": "20260304-SB-UM-210007",
    "GUBUN": "D"
}, {
    "ORD_NO": "2240911004",
    "SCAN_CODE": "8801052062297",
    "ITM_NAME": "청정원 요리유 0.5L",
    "ORD_QTY": 1200,
    "QTY": 1200,
    "BEFO_QTY": 1200,
    "SALE_PRC": 0,
    "SALE_VAT": 0,
    "SALE_AMT": 0,
    "TOTAL_AMT": 0,
    "REMARKS_SALES": null,
    "WEIGHT_GB": "QTY",
    "TAX_GB": "1",
    "LOT_NO": "20850705-YO-DS-210053",
    "GUBUN": "D"
}
]', 'admin'
*/
CREATE PROCEDURE [dbo].[PR_SALES_UPDATE]
	@P_JSONDT			NVARCHAR(MAX),
	@P_EMP_ID			NVARCHAR(20)		-- 아이디
AS 
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	BEGIN TRAN
	BEGIN TRY 
		DECLARE @RETURN_CODE		INT = 0										-- 리턴코드(저장완료)
		DECLARE @RETURN_MESSAGE		NVARCHAR(MAX) = DBO.GET_ERR_MSG('0')		-- 리턴메시지

		DECLARE @IO_GB				NVARCHAR(1)									-- 입출고구분
		DECLARE @SEQ				INT											-- 로그 테이블 SEQ
		DECLARE @AGGR_ORD_NO_LIST	NVARCHAR(MAX)								-- 집계처리 주문번호 리스트

		-- 출고 재고처리 변수
		DECLARE @QTY				NUMERIC(15,2);								-- 현재고
		DECLARE @ITM_FORM			NVARCHAR(2);								-- 제품형태
		DECLARE @LOT_NO				NVARCHAR(300);								-- LOT번호
		DECLARE @PICKING_QTY		NUMERIC(15,2);								-- 변경 피킹수량
		DECLARE @PICKING_SAMT		NUMERIC(17,4);								-- 변경 피킹금액
		DECLARE @ITM_CODE			NVARCHAR(6);								-- 관리코드
		DECLARE @IV_BEFO_QTY		NUMERIC(15,2)								-- 재고처리 변경전피킹수량
		DECLARE @IV_QTY				NUMERIC(15,2)								-- 재고처리 피킹수량
		DECLARE @BOX_SCAN_CODE		NVARCHAR(14) = ''							-- 박스스캔코드

		-- 입고 재고처리 변수
		DECLARE @IV_PUR_BEFO_QTY	NUMERIC(15,2)								-- 재고처리 변경전피킹수량
		DECLARE @IV_PUR_QTY			NUMERIC(15,2)								-- 재고처리 피킹수량


		-- #### 테이블변수 생성
		DECLARE @DATA_TBL TABLE (
			ORD_NO NVARCHAR(11),
			SCAN_CODE NVARCHAR(14),
			QTY NUMERIC(15,2),
			BEFO_QTY NUMERIC(15,2),
			SALE_PRC NUMERIC(17,4),
			SALE_VAT NUMERIC(17,4),
			TOTAL_AMT NUMERIC(17,4),
			GUBUN NVARCHAR(1),
			REMARKS_SALES NVARCHAR(2000),
			LOT_NO NVARCHAR(30),
			CLOSE_WGHT INT
		)

		INSERT INTO @DATA_TBL
			SELECT ORD_NO, 
				   SCAN_CODE,
				   QTY,
				   BEFO_QTY,
				   SALE_PRC,
				   SALE_VAT,
				   TOTAL_AMT,
				   GUBUN,
				   REMARKS_SALES,
				   LOT_NO,
				   CLOSE_WGHT
			  FROM 
				OPENJSON ( @P_JSONDT )   
					WITH (    
						ORD_NO NVARCHAR(11) '$.ORD_NO',
						SCAN_CODE NVARCHAR(14) '$.SCAN_CODE',
						QTY NUMERIC(15,2) '$.QTY',
						BEFO_QTY NUMERIC(15,2) '$.BEFO_QTY',
						SALE_PRC NUMERIC(17,4) '$.SALE_PRC',
						SALE_VAT NUMERIC(17,4) '$.SALE_VAT',
						TOTAL_AMT NUMERIC(17,4) '$.TOTAL_AMT',
						GUBUN NVARCHAR(1) '$.GUBUN',
						REMARKS_SALES NVARCHAR(2000) '$.REMARKS_SALES',
						LOT_NO NVARCHAR(30) '$.LOT_NO',
						CLOSE_WGHT INT  '$.CLOSE_WGHT'
					)
					 
		SELECT TOP 1 @IO_GB = LEFT(ORD_NO, 1) FROM @DATA_TBL  -- 입출고 구분 세팅
		SELECT @AGGR_ORD_NO_LIST = STRING_AGG(ORD_NO, ',') FROM @DATA_TBL; -- 집계용 주문번호 추출


		IF @IO_GB = '2' 
		BEGIN

		
			--### 집계 테이블에서 기존 수량 및 금액 차감하도록 처리
			EXEC PR_AGGR_OIL_ITM_SALE_DEDUCT @AGGR_ORD_NO_LIST, @RETURN_CODE OUT, @RETURN_MESSAGE OUT

		
			-- #### 주문별 LOT 피킹수량 수정
			UPDATE PO_ORDER_LOT
			SET PICKING_QTY = A.QTY,
				TEMP_QTY = PICKING_QTY,
				UDATE = GETDATE(),
				UEMP_ID = @P_EMP_ID
			FROM (
				SELECT SUM(QTY) AS QTY, SCAN_CODE, ORD_NO, LOT_NO
				  FROM @DATA_TBL AS A
				 GROUP BY ORD_NO, SCAN_CODE, LOT_NO
			) AS A
			WHERE PO_ORDER_LOT.ORD_NO = A.ORD_NO
			  AND PO_ORDER_LOT.SCAN_CODE = A.SCAN_CODE
			  AND PO_ORDER_LOT.LOT_NO = A.LOT_NO;

			-- #### 출고 건 재고처리 시작
			DECLARE CURSOR_ORD CURSOR FOR
				 SELECT 
				 --SUM(A.BEFO_QTY) AS BEFO_QTY, -- 기존 피킹수량(본품+샘플)
				 SUM(B.TEMP_QTY) AS BEFO_QTY, -- 기존 피킹수량(본품+샘플)
				 A.SCAN_CODE,
				 A.ORD_NO
				 FROM @DATA_TBL AS A
				 INNER JOIN PO_ORDER_LOT AS B 
					ON A.ORD_NO = B.ORD_NO AND A.SCAN_CODE = B.SCAN_CODE
				 GROUP BY A.ORD_NO, A.SCAN_CODE

			-- CURSOR OPEN
			OPEN CURSOR_ORD 
				DECLARE @P_BEFO_QTY			NUMERIC(15,2),
						@P_SCAN_CODE		NVARCHAR(14),
						@P_ORD_NO			NVARCHAR(11)

			FETCH NEXT FROM CURSOR_ORD INTO @P_BEFO_QTY, @P_SCAN_CODE, @P_ORD_NO

			WHILE(@@FETCH_STATUS=0)
			BEGIN
				PRINT(@P_BEFO_QTY)
				PRINT(@P_SCAN_CODE)
				PRINT(@P_ORD_NO)

				--매출로 잡힌 본품+샘플 변경전 피킹수량과
				--param으로 넘어온 변경 피킹수량으로 현재고 업데이트
				--벌크 -> LOT 없음, 박스제품 -> 단일제품 처리
				
				--본품+샘플 재고 같이 처리하기 위해 SCAN_CODE로 GROUP BY
				SELECT @PICKING_QTY = SUM(QTY),
					   @ITM_FORM = B.ITM_FORM
				  FROM @DATA_TBL AS A
				 INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
				 WHERE A.SCAN_CODE = @P_SCAN_CODE
				 GROUP BY A.SCAN_CODE, B.ITM_FORM
			    
				-- 벌크
				IF @ITM_FORM = '3' OR @ITM_FORM = '4'
				BEGIN
					SET @LOT_NO = ''
				END
				ELSE
				BEGIN
					-- 박스상품: 단품 상품으로 재고 차감
					IF EXISTS (SELECT A.SCAN_CODE FROM CD_PRODUCT_CMN A
								INNER JOIN CD_BOX_MST B ON A.ITM_CODE = B.BOX_CODE
								WHERE A.SCAN_CODE = @P_SCAN_CODE)
					BEGIN
						SELECT @PICKING_QTY = (@PICKING_QTY * B.IPSU_QTY), @ITM_CODE = B.ITM_CODE FROM CD_PRODUCT_CMN A
								INNER JOIN CD_BOX_MST B ON A.ITM_CODE = B.BOX_CODE
								WHERE A.SCAN_CODE = @P_SCAN_CODE
								
						-- LOT 재고처리를 위한 파라미터 넘기기 위해 저장
						SET @BOX_SCAN_CODE = @P_SCAN_CODE

						-- ORDER_LOT는 박스든 단품이든 ORDER_DTL에 있는 스캔코드로 관리하기 때문에 조회됐던 스캔코드로 조회해야함
						SELECT @LOT_NO = STUFF((SELECT ', ' + LOT_NO FROM PO_ORDER_LOT WHERE ORD_NO= @P_ORD_NO AND SCAN_CODE = @P_SCAN_CODE   FOR XML PATH('')),1,2,'')
						FROM PO_ORDER_LOT AS LOT WHERE ORD_NO= @P_ORD_NO AND SCAN_CODE = @P_SCAN_CODE GROUP BY ORD_NO
						
						--단품 스캔코드로 변경해주기
						SELECT @P_SCAN_CODE = SCAN_CODE FROM CD_PRODUCT_CMN WHERE ITM_CODE = @ITM_CODE
					END
					ELSE
					BEGIN					
						SELECT @LOT_NO = STUFF((SELECT ', ' + LOT_NO FROM PO_ORDER_LOT WHERE ORD_NO= @P_ORD_NO AND SCAN_CODE = @P_SCAN_CODE   FOR XML PATH('')),1,2,'')
						FROM PO_ORDER_LOT AS LOT WHERE ORD_NO= @P_ORD_NO AND SCAN_CODE = @P_SCAN_CODE GROUP BY ORD_NO
					END
				END

				PRINT(@LOT_NO)

				SET @IV_BEFO_QTY = @P_BEFO_QTY * (-1)
				SET @IV_QTY = @PICKING_QTY * (-1)

				EXEC PR_IV_PRODUCT_STAT_HDR_PUT @P_SCAN_CODE, @IV_QTY, 'PR_SALES_UPDATE', @IV_BEFO_QTY, @LOT_NO, @P_ORD_NO, @BOX_SCAN_CODE, @RETURN_CODE OUT, @RETURN_MESSAGE OUT
				  
				FETCH NEXT FROM CURSOR_ORD INTO @P_BEFO_QTY, @P_SCAN_CODE, @P_ORD_NO

			END
			CLOSE CURSOR_ORD
			DEALLOCATE CURSOR_ORD
						
			-- #### 출고 건 재고처리 끝


			-- #### 매출데이터 변경 로그 
			SELECT @SEQ = ISNULL(MAX(SEQ), 1) FROM SL_SALE_CHG_LOG 

			INSERT INTO SL_SALE_CHG_LOG (
				SEQ,
				ORD_NO,
				SCAN_CODE,
				GUBUN,
				BEFO_QTY,
				CHG_QTY,
				BEFO_AMT,
				CHG_AMT,
				IDATE,
				IEMP_ID			
			) 		
			SELECT 				
				@SEQ + (ROW_NUMBER() OVER( ORDER BY ORD_NO )) AS SEQ,
				A.ORD_NO,
				A.SCAN_CODE,
				A.GUBUN,
				A.PICKING_QTY, 
				A.QTY, 
				A.PICKING_SAMT, 
				A.CHG_AMT, 
				GETDATE(), 
				@P_EMP_ID
			FROM (				
				SELECT 'D' AS GUBUN, 
					OD.ORD_NO,
					OD.SCAN_CODE,
					OD.PICKING_QTY, 
					OD.PICKING_SAMT,
					DT.QTY, 
					DT.TOTAL_AMT AS CHG_AMT				
				FROM PO_ORDER_DTL AS OD 
					--INNER JOIN @DATA_TBL AS DT ON OD.ORD_NO = DT.ORD_NO AND OD.SCAN_CODE = DT.SCAN_CODE 
					INNER JOIN (
						SELECT SUM(QTY) AS QTY, SUM(TOTAL_AMT) AS TOTAL_AMT, ORD_NO, SCAN_CODE, GUBUN
						  FROM @DATA_TBL
						GROUP BY ORD_NO, SCAN_CODE, GUBUN
					) AS DT ON OD.ORD_NO = DT.ORD_NO AND OD.SCAN_CODE = DT.SCAN_CODE
				WHERE DT.GUBUN = 'D' AND (OD.PICKING_QTY <> DT.QTY OR OD.PICKING_SAMT <> DT.TOTAL_AMT)						
				UNION ALL 							
				SELECT 'S' AS GUBUN, 
					OS.ORD_NO, 
					OS.SCAN_CODE,
					OS.PICKING_QTY, 
					0 AS PICKING_SAMT, 
					DT.QTY, 
					DT.TOTAL_AMT AS CHG_AMT
				FROM PO_ORDER_SAMPLE AS OS 
					INNER JOIN @DATA_TBL AS DT ON OS.ORD_NO = DT.ORD_NO AND OS.SCAN_CODE = DT.SCAN_CODE 
				WHERE DT.GUBUN = 'S' AND (OS.PICKING_QTY <> DT.QTY )
			) A

			-- LOT가 여러개일 수 있으므로 SUM으로 계산
			UPDATE PO_ORDER_DTL SET
				   PICKING_QTY = B.QTY,
				   PICKING_SPRC = A.SALE_PRC,
				   PICKING_SVAT = A.SALE_VAT,
				   PICKING_SAMT = B.TOTAL_AMT,
				   REMARKS_SALES = A.REMARKS_SALES,
				   UDATE = GETDATE(),
				   UEMP_ID = @P_EMP_ID
			  FROM @DATA_TBL AS A
				INNER JOIN (
					--SELECT SUM(A.QTY) AS QTY, SUM(A.SALE_PRC) AS SALE_PRC, SUM(A.SALE_VAT) AS SALE_VAT, SUM(A.TOTAL_AMT) AS TOTAL_AMT, ORD_NO, SCAN_CODE
					SELECT SUM(A.QTY) AS QTY, SUM(A.TOTAL_AMT) AS TOTAL_AMT, ORD_NO, SCAN_CODE
					FROM @DATA_TBL AS A
					WHERE A.GUBUN = 'D'
					GROUP BY ORD_NO, SCAN_CODE
			  )
			  AS B ON A.ORD_NO = B.ORD_NO AND A.SCAN_CODE = B.SCAN_CODE
			  WHERE PO_ORDER_DTL.ORD_NO = A.ORD_NO AND PO_ORDER_DTL.SCAN_CODE = B.SCAN_CODE
			  
			-- #### 샘플 피킹수량 수정
			UPDATE PO_ORDER_SAMPLE SET
				   PICKING_QTY = A.QTY,
				   REMARKS_SALES = A.REMARKS_SALES,
				   UDATE = GETDATE(),
				   UEMP_ID = @P_EMP_ID
			   FROM @DATA_TBL AS A
			   INNER JOIN PO_ORDER_SAMPLE AS B
			   		ON A.ORD_NO = B.ORD_NO AND A.SCAN_CODE = B.SCAN_CODE
			   WHERE A.GUBUN = 'S'
			  
			-- #### 피킹 총금액 수정
			UPDATE PO_ORDER_HDR
				--SET PICKING_TOTAL_AMT = SUM_TBL.TOTAL_PICKING_SAMT,
				SET PICKING_TOTAL_AMT = (SELECT SUM(PICKING_SAMT) FROM PO_ORDER_DTL WHERE ORD_NO = DATA_TBL.ORD_NO),
					PICKING_TOTAL_SPRC = (SELECT SUM(PICKING_SPRC * PICKING_QTY) FROM PO_ORDER_DTL WHERE ORD_NO = DATA_TBL.ORD_NO),
					UDATE = GETDATE(),
					UEMP_ID = @P_EMP_ID
				--FROM (
					--SELECT 
					--	SUM(A.TOTAL_AMT) AS TOTAL_PICKING_SAMT,
					--	A.ORD_NO
					--     FROM @DATA_TBL AS A
					--  GROUP BY A.ORD_NO
					-- ) AS SUM_TBL
				FROM @DATA_TBL AS DATA_TBL
				WHERE PO_ORDER_HDR.ORD_NO = DATA_TBL.ORD_NO

				

			--### 출고완료시 유종별, 제품별 출고량, 매출 집계
			EXEC PR_AGGR_OIL_ITM_SALE_PUT @AGGR_ORD_NO_LIST, @RETURN_CODE OUT, @RETURN_MESSAGE OUT
		
		END
		ELSE IF @IO_GB = '1'
		BEGIN
			-- #### 입고 건 재고처리 시작
			DECLARE CURSOR_PUR CURSOR FOR
				SELECT
					A.PUR_QTY,			--기존 검수수량
					A.PUR_WAMT,			--기존 검수금액
					A.SCAN_CODE,
					A.ORD_NO,
					B.QTY,
					B.REMARKS_SALES,
					B.SALE_PRC,
					B.SALE_VAT,
					B.TOTAL_AMT,
					B.LOT_NO,
					B.CLOSE_WGHT
				  FROM PO_PURCHASE_DTL AS A 
				  INNER JOIN @DATA_TBL AS B ON A.ORD_NO = B.ORD_NO AND A.SCAN_CODE = B.SCAN_CODE
				  
			-- CURSOR OPEN
			OPEN CURSOR_PUR 
				DECLARE @P_BEFO_PUR_QTY			NUMERIC(15,2),
						@P_BEFO_PUR_WAMT		NUMERIC(15,2),
						@PP_SCAN_CODE			NVARCHAR(14),
						@PP_ORD_NO				NVARCHAR(11),
						@P_QTY					NUMERIC(15,2),
						@P_REMARKS_SALES		NVARCHAR(2000),
						@P_SALE_PRC				NUMERIC(15,2),
						@P_SALE_VAT				NUMERIC(15,2),
						@P_TOTAL_AMT			NUMERIC(15,2),
						@P_LOT_NO				NVARCHAR(30),
						@P_CLOSE_WGHT			INT

			FETCH NEXT FROM CURSOR_PUR INTO @P_BEFO_PUR_QTY, @P_BEFO_PUR_WAMT, @PP_SCAN_CODE, @PP_ORD_NO, @P_QTY, @P_REMARKS_SALES, @P_SALE_PRC, @P_SALE_VAT, @P_TOTAL_AMT, @P_LOT_NO, @P_CLOSE_WGHT

			WHILE(@@FETCH_STATUS=0)
			BEGIN
				--기존 본품+샘플 피킹수량과
				--매개변수로 넘어온 변경 피킹수량으로 현재고 업데이트
				--벌크 -> LOT 없음, 박스제품 -> 단일제품 처리
				
				-- 입고수량, 입고금액 수정
				UPDATE PO_PURCHASE_DTL
				SET PUR_QTY = @P_QTY,
					PUR_WPRC = @P_SALE_PRC,
					PUR_WVAT = @P_SALE_VAT,
					PUR_TOTAL_WPRC = @P_SALE_PRC * CASE WHEN @P_CLOSE_WGHT IS NULL OR @P_CLOSE_WGHT = 0 THEN @P_QTY ELSE @P_CLOSE_WGHT END,
					PUR_WAMT = @P_TOTAL_AMT,
					REMARKS_SALES = @P_REMARKS_SALES,
					UDATE = GETDATE(),
					UEMP_ID = @P_EMP_ID
				WHERE ORD_NO = @PP_ORD_NO 
				AND SCAN_CODE = @PP_SCAN_CODE
				  
				SET @IV_PUR_QTY = @P_QTY
				SET @IV_PUR_BEFO_QTY = @P_BEFO_PUR_QTY

				--현재고 처리
				EXEC PR_IV_PRODUCT_STAT_HDR_PUT @PP_SCAN_CODE, @IV_PUR_QTY, 'PR_SALES_UPDATE', @IV_PUR_BEFO_QTY, @P_LOT_NO, @PP_ORD_NO, '', @RETURN_CODE OUT, @RETURN_MESSAGE OUT

				FETCH NEXT FROM CURSOR_PUR INTO @P_BEFO_PUR_QTY, @P_BEFO_PUR_WAMT, @PP_SCAN_CODE, @PP_ORD_NO, @P_QTY, @P_REMARKS_SALES, @P_SALE_PRC, @P_SALE_VAT, @P_TOTAL_AMT, @P_LOT_NO, @P_CLOSE_WGHT

			END
			CLOSE CURSOR_PUR
			DEALLOCATE CURSOR_PUR
			-- #### 입고 건 재고처리 끝

			-- #### 매출입 변경 로그 
			SELECT @SEQ = ISNULL(MAX(SEQ), 1) FROM SL_SALE_CHG_LOG 

			INSERT INTO SL_SALE_CHG_LOG (
				SEQ,
				ORD_NO,
				SCAN_CODE,
				BEFO_QTY,
				CHG_QTY,
				BEFO_AMT,
				CHG_AMT,
				IDATE,
				IEMP_ID			
			) 		
			SELECT 				
				@SEQ + (ROW_NUMBER() OVER( ORDER BY ORD_NO )) AS SEQ,
				A.ORD_NO,
				A.SCAN_CODE,
				A.PUR_QTY, 
				A.PUR_WAMT, 
				A.QTY, 
				A.CHG_AMT, 
				GETDATE(), 
				@P_EMP_ID
			FROM (				
				SELECT 'D' AS GUBUN, 
					PD.ORD_NO,
					PD.SCAN_CODE,
					PD.PUR_QTY, 
					PD.PUR_WAMT,
					DT.QTY, 
					DT.TOTAL_AMT AS CHG_AMT				
				FROM PO_PURCHASE_DTL AS PD
					INNER JOIN @DATA_TBL AS DT ON PD.ORD_NO = DT.ORD_NO AND PD.SCAN_CODE = DT.SCAN_CODE 
					WHERE PD.PUR_QTY <> DT.QTY OR PD.PUR_WAMT <> DT.TOTAL_AMT
			) A


			-- #### 검수 총금액 수정
			UPDATE PO_PURCHASE_HDR
				--SET PUR_TOTAL_AMT = SUM_TBL.TOTAL_PUR_WAMT,
				SET PUR_TOTAL_AMT = (SELECT SUM(PUR_WAMT) FROM PO_PURCHASE_DTL WHERE ORD_NO = DATA_TBL.ORD_NO),
					PUR_TOTAL_WPRC = (SELECT SUM(PUR_WPRC * PUR_QTY) FROM PO_PURCHASE_DTL WHERE ORD_NO = DATA_TBL.ORD_NO),
					UDATE = GETDATE(),
					UEMP_ID = @P_EMP_ID
				--FROM (SELECT 
				--		SUM(A.TOTAL_AMT) AS TOTAL_PUR_WAMT,
				--		A.ORD_NO
				--      FROM @DATA_TBL AS A
				--	  GROUP BY A.ORD_NO
				--) AS SUM_TBL
				FROM @DATA_TBL AS DATA_TBL
				WHERE PO_PURCHASE_HDR.ORD_NO = DATA_TBL.ORD_NO

				
			-- ####주문별 마감중량 수정
			UPDATE PO_SCALE
			   SET CLOSE_WGHT = A.CLOSE_WGHT
			  FROM @DATA_TBL AS A
			WHERE PO_SCALE.ORD_NO = A.ORD_NO

		END
		
		--#################################################
		--# 매출 테이블 변경 전 수/중량 및 판매가 업데이트
		--##################################################			
		UPDATE SL_SALE SET BEFO_QTY = TMP.BEFO_QTY, BEFO_AMT = TMP.BEFO_AMT, UDATE = GETDATE(), UEMP_ID = @P_EMP_ID
		FROM (
		
			SELECT 
				SL.ORD_NO,
				SL.SCAN_CODE,
				SL.GUBUN,
				(CASE WHEN CMN.WEIGHT_GB = 'QTY' THEN SL.SALE_EA WHEN CMN.WEIGHT_GB = 'WT' THEN SL.SALE_KG ELSE 0 END) AS BEFO_QTY,
				SL.SALE_TOTAL_AMT AS BEFO_AMT
			FROM SL_SALE AS SL 
				INNER JOIN @DATA_TBL AS DT ON SL.ORD_NO = DT.ORD_NO AND SL.SCAN_CODE = DT.SCAN_CODE AND SL.GUBUN = DT.GUBUN
				INNER JOIN CD_PRODUCT_CMN AS CMN ON SL.SCAN_CODE = CMN.SCAN_CODE							
		) AS TMP WHERE TMP.ORD_NO = SL_SALE.ORD_NO AND TMP.SCAN_CODE = SL_SALE.SCAN_CODE AND TMP.GUBUN = SL_SALE.GUBUN

		--UPDATE SL_SALE SET BEFO_QTY = TMP.BEFO_QTY, BEFO_AMT = TMP.BEFO_AMT, UDATE = GETDATE(), UEMP_ID = @P_EMP_ID
		--FROM (
		--	SELECT 
		--		DT.ORD_NO,
		--		DT.SCAN_CODE,
		--		DT.GUBUN,
		--		SUM(ISNULL(DT.QTY, 0)) AS BEFO_QTY,
		--		SUM(ISNULL(DT.TOTAL_AMT, 0)) AS BEFO_AMT
		--	FROM @DATA_TBL AS DT 						
		--	GROUP BY ORD_NO, SCAN_CODE, GUBUN
		--) AS TMP WHERE TMP.ORD_NO = SL_SALE.ORD_NO AND TMP.SCAN_CODE = SL_SALE.SCAN_CODE AND TMP.GUBUN = SL_SALE.GUBUN
		


		SELECT @RETURN_CODE AS RETURN_CODE, @RETURN_MESSAGE AS RETURN_MESSAGE
		
	COMMIT;
	END TRY
	
	BEGIN CATCH		
		IF @@TRANCOUNT > 0
		BEGIN 
			ROLLBACK TRAN

			IF CURSOR_STATUS('global', 'CURSOR_ORD') >= 0
			BEGIN
				CLOSE CURSOR_ORD;
				DEALLOCATE CURSOR_ORD;
			END

			IF CURSOR_STATUS('global', 'CURSOR_PUR') >= 0
			BEGIN
				CLOSE CURSOR_PUR;
				DEALLOCATE CURSOR_PUR;
			END

			--에러 로그 테이블 저장
			INSERT INTO TBL_ERROR_LOG 
			SELECT ERROR_PROCEDURE()		-- 프로시저명
				, ERROR_MESSAGE()			-- 에러메시지
				, ERROR_LINE()				-- 에러라인
				, GETDATE()	

			SET @RETURN_CODE = -1
			SET @RETURN_MESSAGE = ERROR_MESSAGE()

		END 
		
		SELECT @RETURN_CODE AS RETURN_CODE, @RETURN_MESSAGE AS RETURN_MESSAGE 
	END CATCH
	
END

GO

