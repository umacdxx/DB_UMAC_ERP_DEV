/*
-- 생성자 :	강세미
-- 등록일 :	2023.01.30
-- 수정자 : - 
-- 수정일 : - 
-- 설 명  : 상품 마스터 팝업 리스트 출력
-- 실행문 : 
EXEC PR_PRODUCT_CMN_LIST_POPUP '', '','','','','','','ORDER'
EXEC PR_PRODUCT_CMN_LIST_POPUP '18801052062294', '','','','','',''
EXEC PR_PRODUCT_CMN_LIST_POPUP '8801052062297', '','','','','',''


-- 2024.04.04 윤현빈 : 검색조건 SCAN_CODE = 에서 LIKE로 변경 
-- 2024.04.23 강세미 : VEN_CODE 추가2
-- 2024.05.24 강세미 : 다중 GRE_GB 추가
-- 2024.06.14 강세미 : 박스상품 현재고, 가용재고 단품상품으로 조회
-- 2024.07.31 강세미 : 벌크제품 현재고, 가용재고 0 처리
-- 2024.08.05 강세미 : 페이지 구분(GUBUN) 추가
*/
CREATE PROCEDURE [dbo].[PR_PRODUCT_CMN_LIST_POPUP]
( 
	@P_ITM_NAME		NVARCHAR(100) = '',		-- 상품명(코드)
	@P_END_IND		NVARCHAR(1) = '',		-- 취급여부
	@P_ITM_FORM		NVARCHAR(2) = '',		-- 상품형태
	@P_BOM_GB		NVARCHAR(1) = '',		-- BOM구분 1:생산품 2:구성품
	@P_SET_GB		NVARCHAR(1) = '',		-- SET구분 1:생산품 2:구성품
	@P_GRE_GB		NVARCHAR(10) = '',		-- 거래구분
	@P_VEN_CODE		NVARCHAR(7) = '',		-- 거래처코드
	@P_GUBUN		NVARCHAR(20) = ''		-- 페이지 구분
)
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	DECLARE @GRE_GB1 NVARCHAR(1) = ''
	DECLARE @GRE_GB2 NVARCHAR(1) = ''
	DECLARE @GRE_GB3 NVARCHAR(1) = ''
	
	BEGIN TRY 
		IF LEN(@P_GRE_GB) > 1 
				WITH SP_VALUE AS (
					SELECT 
						ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS RowNum, 
						RVALUE 
					FROM dbo.FN_SPLIT(@P_GRE_GB, ',')
				)
				SELECT
					@GRE_GB1 = MAX(CASE WHEN ROWNUM = 1 THEN RVALUE END),
					@GRE_GB2 = MAX(CASE WHEN ROWNUM = 2 THEN RVALUE END),
					@GRE_GB3 = MAX(CASE WHEN ROWNUM = 3 THEN RVALUE END)
				FROM SP_VALUE; 
			
		SELECT A.ITM_CODE
			  , A.SCAN_CODE
			  , A.ITM_NAME
			  , A.ITM_NAME_DETAIL
			  , A.END_IND
			  , B.CD_NM AS END_IND_NM
			  , E.LRG_NAME + ' > ' + D.MID_NAME AS CATEGORY_NM
			  , A.TAX_GB
			  , C.CD_NM AS TAX_GB_NM
			  , A.UNIT
			  , F.CD_NM AS UNIT_NM
			  , A.IPSU_QTY
			  , A.UNIT_CAPACITY
			  , A.UNIT_WEIGHT
			  , H_2.CD_NM AS LOT_OIL_GB
			  , H_3.CD_NM AS LOT_PARTNER_GB
			  , A.BOM_GB
			  , A.SET_GB
			  , ISNULL(A.BASE_SPRC,0) AS BASE_SPRC
			  , ISNULL(A.BASE_SVAT,0) AS BASE_SVAT
			  , ISNULL(A.BASE_WPRC,0) AS BASE_WPRC
			  , ISNULL(A.BASE_WVAT,0) AS BASE_WVAT
			  , A.WEIGHT_GB
			  , H.CD_NM AS WEIGHT_GB_NM
			  , CASE WHEN A.ITM_FORM = '3' THEN 0 WHEN A.ITM_FORM = '2' THEN I.BOX_EACH_QTY ELSE I.CUR_INV_QTY END AS CUR_INV_QTY
			  , CASE WHEN A.ITM_FORM = '3' THEN 0 WHEN A.ITM_FORM = '2' THEN ISNULL(I.BOX_EACH_QTY, 0) - ISNULL(J.TOTAL_ORD_QTY, 0) ELSE ISNULL(G.CUR_INV_QTY,0) - ISNULL(J.TOTAL_ORD_QTY, 0) END AS AVL_INV_QTY
			  --, CASE WHEN A.ITM_FORM = '2' THEN I.BOX_EACH_QTY - J.ORD_QTY ELSE G.CUR_INV_QTY - J.ORD_QTY END AS AVL_INV_QTY
			  , CASE WHEN LOT.SCAN_CODE IS NULL  THEN 'N' WHEN A.ITM_FORM = '3' THEN 'N' ELSE 'Y' END AS LOT_YN -- 벌크는 lot처리 안하기 때문에 조건 추가
		  FROM CD_PRODUCT_CMN AS A
				LEFT OUTER JOIN TBL_COMM_CD_MST AS B
					ON B.CD_CL = 'END_IND' AND B.CD_ID = A.END_IND
				LEFT OUTER JOIN TBL_COMM_CD_MST AS C
					ON C.CD_CL = 'TAX_GB' AND C.CD_ID = A.TAX_GB
				INNER JOIN CD_MID_MST AS D
					ON D.MID_CODE = A.MID_CODE
				INNER JOIN CD_LRG_MST AS E
					ON E.LRG_CODE = D.LRG_CODE
				LEFT OUTER JOIN TBL_COMM_CD_MST AS F
					ON F.CD_CL = 'UNIT' AND F.CD_ID = A.UNIT
				LEFT OUTER JOIN IV_PRODUCT_STAT G
					ON A.SCAN_CODE = G.SCAN_CODE
				LEFT OUTER JOIN TBL_COMM_CD_MST AS H
					ON H.CD_CL = 'WEIGHT_GB' AND A.WEIGHT_GB = H.CD_ID
				LEFT OUTER JOIN TBL_COMM_CD_MST  AS H_2
					ON H_2.CD_CL = 'LOT_OIL_GB' AND A.LOT_OIL_GB = H_2.CD_ID
				LEFT OUTER JOIN TBL_COMM_CD_MST  AS H_3
					ON H_3.CD_CL = 'LOT_PARTNER_GB' AND A.LOT_PARTNER_GB = H_3.CD_ID
				LEFT OUTER JOIN (
									SELECT A.SCAN_CODE
									 	 , A.ITM_CODE
										 , D.SCAN_CODE AS EACH_CODE
									 	 , B.CUR_INV_QTY
									 	 , D.CUR_INV_QTY AS BOX_EACH_QTY
									 FROM CD_PRODUCT_CMN AS A
									 LEFT OUTER JOIN IV_PRODUCT_STAT AS B ON A.SCAN_CODE = B.SCAN_CODE
									 LEFT OUTER JOIN CD_BOX_MST AS C ON A.ITM_CODE = C.BOX_CODE
									 LEFT OUTER JOIN IV_PRODUCT_STAT AS D ON C.ITM_CODE = D.ITM_CODE

								) AS I
					ON A.SCAN_CODE = I.SCAN_CODE
				 LEFT OUTER JOIN VIEW_TOTAL_ORDER_QTY AS J ON A.ITM_CODE = J.ITM_CODE
				 LEFT OUTER JOIN (SELECT A.SCAN_CODE FROM IV_LOT_STAT AS A INNER JOIN CD_LOT_MST AS B ON A.SCAN_CODE = B.SCAN_CODE AND A.LOT_NO = B.LOT_NO GROUP BY A.SCAN_CODE) AS LOT ON ISNULL(I.EACH_CODE, A.SCAN_CODE) = LOT.SCAN_CODE
		  WHERE (A.ITM_CODE LIKE '%' + (CASE WHEN @P_ITM_NAME <> '' THEN @P_ITM_NAME ELSE A.ITM_CODE END)  + '%'
					OR A.ITM_NAME LIKE '%' + (CASE WHEN @P_ITM_NAME <> '' THEN @P_ITM_NAME ELSE A.ITM_NAME END) + '%'
					OR A.ITM_NAME_DETAIL LIKE '%' + (CASE WHEN @P_ITM_NAME <> '' THEN @P_ITM_NAME ELSE A.ITM_NAME_DETAIL END) + '%'
					OR A.SCAN_CODE LIKE '%' + (CASE WHEN @P_ITM_NAME <> '' THEN @P_ITM_NAME ELSE A.SCAN_CODE END) + '%'
				)			
				AND 1 = (CASE WHEN @P_END_IND = '' THEN 1 WHEN @P_END_IND <> '' AND A.END_IND = @P_END_IND THEN 1 ELSE 0 END)
				AND 1 = (CASE WHEN @P_ITM_FORM = '' THEN 1 WHEN @P_ITM_FORM <> '' AND A.ITM_FORM = @P_ITM_FORM THEN 1 ELSE 0 END)
				AND 1 = (CASE WHEN @P_BOM_GB = '' THEN 1 WHEN @P_BOM_GB <> '' AND A.BOM_GB = @P_BOM_GB THEN 1 ELSE 0 END)
				AND 1 = (CASE WHEN @P_SET_GB = '' THEN 1 WHEN @P_SET_GB <> '' AND A.SET_GB = @P_SET_GB THEN 1 ELSE 0 END)
				AND 1 = (CASE WHEN @P_GRE_GB = '' THEN 1 WHEN @P_GRE_GB <> '' AND @GRE_GB1 = '' AND A.GRE_GB = @P_GRE_GB THEN 1 WHEN @P_GRE_GB <> '' AND @GRE_GB1 <> '' AND A.GRE_GB IN (@GRE_GB1, @GRE_GB2, @GRE_GB3) THEN 1 ELSE 0 END)
				--AND 1 = (CASE WHEN @P_VEN_CODE = '' THEN 1 WHEN @P_VEN_CODE <> '' AND (A.VEN_CODE = @P_VEN_CODE 
				--																	OR A.VEN_CODE_2 = @P_VEN_CODE 
				--																	OR A.VEN_CODE_3 = @P_VEN_CODE 
				--																	OR A.VEN_CODE_4 = @P_VEN_CODE 
				--																	OR A.VEN_CODE_5 = @P_VEN_CODE )
				--																	THEN 1 ELSE 0 END)
		ORDER BY (CASE WHEN (@P_GUBUN = 'ORDER' OR @P_GUBUN = 'SAMPLE') AND A.ITM_FORM = '2' THEN '0' 
					   WHEN (@P_GUBUN = 'ORDER' OR @P_GUBUN = 'SAMPLE') AND A.ITM_FORM = '1' THEN '1' 
					   ELSE A.SCAN_CODE END) ASC


				 
	END TRY
	
	BEGIN CATCH		
		--에러 로그 테이블 저장
		INSERT INTO TBL_ERROR_LOG 
		SELECT ERROR_PROCEDURE()	-- 프로시저명
		, ERROR_MESSAGE()			-- 에러메시지
		, ERROR_LINE()				-- 에러라인
		, GETDATE()	
	END CATCH
	
END

GO

