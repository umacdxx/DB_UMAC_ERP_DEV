
/*
-- 생성자 :	최수민
-- 등록일 :	2024.09.10
-- 설 명  : 집계 테이블 데이터 일괄 저장
-- 수정자 :	-
-- 수정일 :	-
-- 설 명  : 
-- 실행문 : EXEC PR_AGGR_OIL_ITM_SALE_PUT_DATA
*/
CREATE PROCEDURE [dbo].[PR_AGGR_OIL_ITM_SALE_PUT_DATA]
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	BEGIN TRAN
	BEGIN TRY 

	/*

	SELECT * FROM AG_SALE
	SELECT * FROM AG_ORDER_ITM
	SELECT * FROM AG_ORDER_OIL
	
	DELETE FROM AG_SALE
	DELETE FROM AG_ORDER_ITM
	DELETE FROM AG_ORDER_OIL

	*/
		
		--########## 유종별 출고량 집계
		MERGE INTO AG_ORDER_OIL AS AO
		USING (
			SELECT HDR.DELIVERY_DEC_DT AS AGGR_DT
				, SUBSTRING(LOT.LOT_NO, 
							CHARINDEX('-', LOT.LOT_NO) + 1, 
							CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - CHARINDEX('-', LOT.LOT_NO) - 1) AS LOT_OIL_GB
				, SUBSTRING(LOT.LOT_NO, 
							CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1, 
							CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1) - CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - 1) AS LOT_PARTNER_GB
				, SUM(ISNULL(DTL.PICKING_QTY, 0) * ISNULL(CMN.NET_WEIGHT/1000,1)) AS AGGR_KG_QTY
				, SUM(ISNULL(DTL.PICKING_SAMT, 0)) AS AGGR_AMT
			FROM PO_ORDER_HDR AS HDR
			INNER JOIN PO_ORDER_DTL AS DTL ON HDR.ORD_NO = DTL.ORD_NO
			INNER JOIN (SELECT ORD_NO, SCAN_CODE, MIN(LOT_NO) AS LOT_NO FROM PO_ORDER_LOT GROUP BY ORD_NO, SCAN_CODE) AS LOT ON HDR.ORD_NO = LOT.ORD_NO AND DTL.SCAN_CODE = LOT.SCAN_CODE
			INNER JOIN CD_PRODUCT_CMN AS CMN ON DTL.SCAN_CODE = CMN.SCAN_CODE
			WHERE HDR.ORD_STAT IN ('35' ,'40')
			  AND (TRIM(LOT.LOT_NO) <> '')
			  AND HDR.DELIVERY_DEC_DT IS NOT NULL
			GROUP BY HDR.DELIVERY_DEC_DT
				, SUBSTRING(LOT.LOT_NO, 
							CHARINDEX('-', LOT.LOT_NO) + 1, 
							CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - CHARINDEX('-', LOT.LOT_NO) - 1)
				, SUBSTRING(LOT.LOT_NO, 
							CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1, 
							CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1) - CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - 1)
		) AS MS_AGGR
		ON (
			AO.AGGR_DT = MS_AGGR.AGGR_DT
			AND AO.LOT_OIL_GB = MS_AGGR.LOT_OIL_GB
			AND AO.LOT_PARTNER_GB = MS_AGGR.LOT_PARTNER_GB
		)
		WHEN MATCHED THEN 
			UPDATE SET 
				AO.AGGR_KG_QTY = MS_AGGR.AGGR_KG_QTY,
				AO.AGGR_AMT = MS_AGGR.AGGR_AMT
		WHEN NOT MATCHED THEN 
			INSERT (AGGR_DT, LOT_OIL_GB, LOT_PARTNER_GB, AGGR_KG_QTY, AGGR_AMT)
			VALUES (MS_AGGR.AGGR_DT, MS_AGGR.LOT_OIL_GB, MS_AGGR.LOT_PARTNER_GB, MS_AGGR.AGGR_KG_QTY, MS_AGGR.AGGR_AMT);


			
		--########## 제품별 출고량 집계
		MERGE INTO AG_ORDER_ITM AS AO
		USING (
			SELECT HDR.DELIVERY_DEC_DT AS AGGR_DT
				, DTL.SCAN_CODE
				, CMN.WEIGHT_GB
				, SUBSTRING(LOT.LOT_NO, 
							CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1, 
							CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1) - CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - 1) AS LOT_PARTNER_GB
				, ISNULL(CASE WHEN CMN.WEIGHT_GB = 'QTY' THEN ISNULL(SUM(DTL.PICKING_QTY),0) ELSE 0 END, 0) AS AGGR_EA_QTY
				, SUM(ISNULL(DTL.PICKING_QTY, 0) * ISNULL(CMN.NET_WEIGHT/1000,1)) AS AGGR_KG_QTY
				, SUM(ISNULL(DTL.PICKING_SAMT, 0)) AS AGGR_AMT
			FROM PO_ORDER_HDR AS HDR
			INNER JOIN PO_ORDER_DTL AS DTL ON HDR.ORD_NO = DTL.ORD_NO
			INNER JOIN (SELECT ORD_NO, SCAN_CODE, MIN(LOT_NO) AS LOT_NO FROM PO_ORDER_LOT GROUP BY ORD_NO, SCAN_CODE) AS LOT ON HDR.ORD_NO = LOT.ORD_NO AND DTL.SCAN_CODE = LOT.SCAN_CODE AND LOT.LOT_NO IS NOT NULL
			INNER JOIN CD_PRODUCT_CMN AS CMN ON DTL.SCAN_CODE = CMN.SCAN_CODE
			WHERE HDR.ORD_STAT IN ('35' ,'40')
			  AND (LOT.LOT_NO <> '')
			  AND HDR.DELIVERY_DEC_DT IS NOT NULL
			GROUP BY HDR.DELIVERY_DEC_DT, DTL.SCAN_CODE, CMN.WEIGHT_GB
				, SUBSTRING(LOT.LOT_NO, 
							CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1, 
							CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1) - CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - 1)
		) AS MS_AGGR
		ON (
			AO.AGGR_DT = MS_AGGR.AGGR_DT
			AND AO.SCAN_CODE = MS_AGGR.SCAN_CODE
			AND AO.LOT_PARTNER_GB = MS_AGGR.LOT_PARTNER_GB
		)
		WHEN MATCHED THEN
			UPDATE SET 
				AO.AGGR_EA_QTY = MS_AGGR.AGGR_EA_QTY,
				AO.AGGR_KG_QTY = MS_AGGR.AGGR_KG_QTY,
				AO.AGGR_AMT = MS_AGGR.AGGR_AMT
		WHEN NOT MATCHED THEN
			INSERT (AGGR_DT, SCAN_CODE, WEIGHT_GB, LOT_PARTNER_GB, AGGR_EA_QTY, AGGR_KG_QTY, AGGR_AMT)
			VALUES (MS_AGGR.AGGR_DT, MS_AGGR.SCAN_CODE, MS_AGGR.WEIGHT_GB, MS_AGGR.LOT_PARTNER_GB, MS_AGGR.AGGR_EA_QTY, MS_AGGR.AGGR_KG_QTY, MS_AGGR.AGGR_AMT);


		

		--########## 매출 집계
		MERGE INTO AG_SALE AS AGS
		USING (
			SELECT HDR.DELIVERY_DEC_DT AS AGGR_DT
				 , SUBSTRING(LOT.LOT_NO, 
							 CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1, 
							 CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1) - CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - 1) AS LOT_PARTNER_GB
				 , SUM(ISNULL(CASE WHEN CMN.WEIGHT_GB = 'QTY' THEN DTL.PICKING_SAMT ELSE 0 END, 0)) AS AGGR_EA_AMT
				 , SUM(ISNULL(CASE WHEN CMN.WEIGHT_GB = 'WT'  THEN DTL.PICKING_SAMT ELSE 0 END, 0)) AS AGGR_KG_AMT
				 , SUM(ISNULL(DTL.PICKING_SAMT, 0)) AS AGGR_AMT
			FROM PO_ORDER_HDR AS HDR
			INNER JOIN PO_ORDER_DTL AS DTL ON HDR.ORD_NO = DTL.ORD_NO
			INNER JOIN (SELECT ORD_NO, SCAN_CODE, MIN(LOT_NO) AS LOT_NO FROM PO_ORDER_LOT GROUP BY ORD_NO, SCAN_CODE) AS LOT ON HDR.ORD_NO = LOT.ORD_NO AND DTL.SCAN_CODE = LOT.SCAN_CODE
			INNER JOIN CD_PRODUCT_CMN AS CMN ON DTL.SCAN_CODE = CMN.SCAN_CODE
			WHERE HDR.ORD_STAT IN ( '35', '40' )
			  AND (LOT.LOT_NO <> '' AND LOT.LOT_NO IS NOT NULL)
			  AND HDR.DELIVERY_DEC_DT IS NOT NULL
			GROUP BY HDR.DELIVERY_DEC_DT,
					 SUBSTRING(LOT.LOT_NO, 
							   CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1, 
							   CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1) - CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - 1)
		) AS MS_AGGR
		ON (
			AGS.AGGR_DT = MS_AGGR.AGGR_DT
			AND AGS.LOT_PARTNER_GB = MS_AGGR.LOT_PARTNER_GB
		)
		WHEN MATCHED THEN 
			UPDATE SET 
				AGS.AGGR_EA_AMT = MS_AGGR.AGGR_EA_AMT,
				AGS.AGGR_KG_AMT = MS_AGGR.AGGR_KG_AMT,
				AGS.AGGR_AMT = MS_AGGR.AGGR_AMT
		WHEN NOT MATCHED THEN 
			INSERT (AGGR_DT, LOT_PARTNER_GB, AGGR_EA_AMT, AGGR_KG_AMT, AGGR_AMT)
			VALUES (MS_AGGR.AGGR_DT, MS_AGGR.LOT_PARTNER_GB, MS_AGGR.AGGR_EA_AMT, MS_AGGR.AGGR_KG_AMT, MS_AGGR.AGGR_AMT);



			
		COMMIT;
	END TRY
	
	BEGIN CATCH		

		IF @@TRANCOUNT > 0
		BEGIN 
			ROLLBACK TRAN
			
			--에러 로그 테이블 저장
			INSERT INTO TBL_ERROR_LOG 
			SELECT ERROR_PROCEDURE()	-- 프로시저명
			, ERROR_MESSAGE()			-- 에러메시지
			, ERROR_LINE()				-- 에러라인
			, GETDATE()	

		END 

	END CATCH

END

GO

