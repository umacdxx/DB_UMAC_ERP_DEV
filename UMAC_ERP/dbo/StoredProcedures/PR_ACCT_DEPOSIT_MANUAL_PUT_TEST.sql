
/*

-- 생성자 :	이동호
-- 등록일 :	2024.05.23
-- 수정자 : - 윤현빈
-- 수정일 : - 2024.06.26 수정 및 삭제시에도 적용하도록 
-- 설 명  : 입금내역 수동 등록
-- 실행문 : 

DECLARE @P_JSONDT VARCHAR(8000) = '
[
	{"DEPOSIT_DT":"20240604", "VEN_CODE":"UM20070", "DEPOSIT_GB":"01", "DEPOSIT_AMT":"1000"},
	{"DEPOSIT_DT":"20240604", "VEN_CODE":"UM20071", "DEPOSIT_GB":"01", "DEPOSIT_AMT":"2000"},
	{"DEPOSIT_DT":"20240604", "VEN_CODE":"UM20072", "DEPOSIT_GB":"01", "DEPOSIT_AMT":"1000"}
]
'
EXEC PR_ACCT_DEPOSIT_MANUAL_PUT @P_JSONDT
--
*/
CREATE PROCEDURE [dbo].[PR_ACCT_DEPOSIT_MANUAL_PUT_TEST]
( 
	
	@P_JSONDT			VARCHAR(MAX) = '',
	@P_EMP_ID			VARCHAR(20),				-- 아이디
	@R_RETURN_CODE 		INT 			OUTPUT,		-- 리턴코드
	@R_RETURN_MESSAGE 	NVARCHAR(2000) 	OUTPUT 		-- 리턴메시지

)
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	DECLARE @RETURN_CODE INT = 0									-- 리턴코드(저장완료)
	DECLARE @RETURN_MESSAGE NVARCHAR(MAX) = DBO.GET_ERR_MSG('0')	-- 리턴메시지
	DECLARE @IDATE VARCHAR(8) = FORMAT(GETDATE(), 'yyyyMMdd')	
	DECLARE @REQ_AMT INT = 0
	DECLARE @RECEIVE_YN VARCHAR(1) = 'N'		
	DECLARE @DEPOSIT_NO_CNT INT,
			@DEPOSIT_NO NVARCHAR(11);

	DECLARE @R_MOID NVARCHAR(100);
	DECLARE @PRE_MOID NVARCHAR(100);
	DECLARE @PRE_DEPOSIT_AMT INT;

	SET @R_RETURN_CODE = @RETURN_CODE
	SET @R_RETURN_MESSAGE = @RETURN_MESSAGE

	BEGIN TRAN
	BEGIN TRY 	
		
		EXEC PR_ACCT_ORDER_RETURN_ID @R_MOID OUTPUT
	
		DECLARE @DEPOSIT_ORD_TMP TABLE (
			DEPOSIT_DT NVARCHAR(11),
			VEN_CODE NVARCHAR(7),
			DEPOSIT_GB NVARCHAR(2),
			DEPOSIT_AMT INT,
			DEPOSIT_NO NVARCHAR(11),
			MODE NVARCHAR(1)
		)
		
		INSERT INTO @DEPOSIT_ORD_TMP
		SELECT DEPOSIT_DT, VEN_CODE, DEPOSIT_GB, DEPOSIT_AMT, DEPOSIT_NO, MODE 
			FROM 
				OPENJSON ( @P_JSONDT )   
					WITH (    
						DEPOSIT_DT NVARCHAR(11) '$.DEPOSIT_DT',
						VEN_CODE NVARCHAR(7) '$.VEN_CODE',
						DEPOSIT_GB NVARCHAR(2) '$.DEPOSIT_GB_NAME',
						DEPOSIT_AMT INT '$.DEPOSIT_AMT',
						DEPOSIT_NO	NVARCHAR(11) '$.DEPOSIT_NO',
						MODE		NVARCHAR(1) '$.MODE'
					)
				
		--# 삭제 하기전 LOG 테이블에 저장
		INSERT INTO PA_ACCT_DEPOSIT_DEL_LOG (MOID, VEN_CODE, DEPOSIT_GB, DEPOSIT_NO, DEPOSIT_AMT, DEPOSIT_DT, DEPOSIT_FISH, ISSUER_CODE, CARD_NO, APP_NO, IDATE, IEMP_ID)
		SELECT MOID, DEP.VEN_CODE, DEP.DEPOSIT_GB, DEP.DEPOSIT_NO, DEP.DEPOSIT_AMT, DEP.DEPOSIT_DT, DEPOSIT_FISH, ISSUER_CODE, CARD_NO, APP_NO, IDATE, IEMP_ID 
			FROM PA_ACCT_DEPOSIT AS DEP
				INNER JOIN @DEPOSIT_ORD_TMP AS OTMP ON DEP.VEN_CODE = OTMP.VEN_CODE
				AND DEP.DEPOSIT_NO = OTMP.DEPOSIT_NO
		
		INSERT INTO PA_ACCT_DEPOSIT_ORD_DEL_LOG (SALE_DT, ORD_NO, VEN_CODE, SALE_TOTAL_AMT, DEPOSIT_GB, DEPOSIT_NO, MOID, DEPOSIT_AMT, DEPOSIT_DT, DEPOSIT_FISH, DEL_YN, IDATE)
		SELECT SALE_DT, ORD_NO, DORD.VEN_CODE, SALE_TOTAL_AMT, DORD.DEPOSIT_GB, DORD.DEPOSIT_NO, MOID, DORD.DEPOSIT_AMT, DORD.DEPOSIT_DT, DEPOSIT_FISH, 'Y', IDATE
			FROM PA_ACCT_DEPOSIT_ORD AS DORD
				INNER JOIN @DEPOSIT_ORD_TMP AS OTMP ON DORD.VEN_CODE = OTMP.VEN_CODE
				AND DORD.DEPOSIT_NO = OTMP.DEPOSIT_NO
				WHERE DORD.SALE_TOTAL_AMT = 0
		--# 삭제 하기전 LOG 테이블에 저장 //

		--# 기존 ROW DATA 삭제 후 다시 생성
		DELETE PA_ACCT_DEPOSIT 
			FROM PA_ACCT_DEPOSIT AS DEP
				INNER JOIN @DEPOSIT_ORD_TMP AS OTMP ON DEP.VEN_CODE = OTMP.VEN_CODE
				AND DEP.DEPOSIT_NO = OTMP.DEPOSIT_NO

		DELETE PA_ACCT_DEPOSIT_ORD 
			FROM PA_ACCT_DEPOSIT_ORD AS DORD
				INNER JOIN @DEPOSIT_ORD_TMP AS OTMP ON DORD.VEN_CODE = OTMP.VEN_CODE
				AND DORD.DEPOSIT_NO = OTMP.DEPOSIT_NO
				WHERE DORD.SALE_TOTAL_AMT = 0
		
		UPDATE PA_ACCT_DEPOSIT_ORD SET DEPOSIT_FISH = 'N'
			FROM PA_ACCT_DEPOSIT_ORD AS DORD
				INNER JOIN @DEPOSIT_ORD_TMP AS OTMP ON DORD.VEN_CODE = OTMP.VEN_CODE
			WHERE DORD.SALE_TOTAL_AMT > 0
		--# 기존 ROW DATA 삭제 후 다시 생성 //
	

		DECLARE CURSOR_DEPOT CURSOR FOR

		SELECT DEPOSIT_DT, VEN_CODE, DEPOSIT_GB, DEPOSIT_AMT, DEPOSIT_NO, ISNULL(MODE, '') AS MODE FROM @DEPOSIT_ORD_TMP
			
		OPEN CURSOR_DEPOT

		DECLARE @P_DEPOSIT_DT	NVARCHAR(11),
				@P_VEN_CODE		NVARCHAR(7),
				@P_DEPOSIT_GB	NVARCHAR(2),
				@P_DEPOSIT_AMT	INT,
				@P_DEPOSIT_NO	NVARCHAR(11),
				@P_MODE			NVARCHAR(1)

		FETCH NEXT FROM CURSOR_DEPOT INTO @P_DEPOSIT_DT, @P_VEN_CODE, @P_DEPOSIT_GB, @P_DEPOSIT_AMT, @P_DEPOSIT_NO, @P_MODE

		WHILE(@@FETCH_STATUS=0)

		BEGIN
			
			IF @P_DEPOSIT_AMT > 0 AND @P_MODE NOT IN('D')
			BEGIN
				
				SET @R_MOID = CAST(@R_MOID AS BIGINT) + 1
				
				SET @DEPOSIT_NO = DBO.GET_DEPOSIT_NO(@P_DEPOSIT_DT)
				
				IF @P_DEPOSIT_NO = '' 
					SET @P_DEPOSIT_NO = @DEPOSIT_NO
				
				INSERT INTO PA_ACCT_DEPOSIT 
				(
					MOID, 
					VEN_CODE,
					DEPOSIT_GB,
					DEPOSIT_NO, 
					DEPOSIT_AMT, 
					DEPOSIT_DT, 
					DEPOSIT_FISH, 
					IDATE,
					IEMP_ID
				)
				VALUES
				(
					@R_MOID, 
					@P_VEN_CODE, 
					@P_DEPOSIT_GB, 
					@P_DEPOSIT_NO, 
					@P_DEPOSIT_AMT, 
					@P_DEPOSIT_DT, 
					'Y',
					GETDATE(),
					@P_EMP_ID
				)

				--#주문별 입금 등록						
				EXEC PR_ACCT_DEPOSIT_ORD_PUT @P_VEN_CODE, @P_DEPOSIT_GB, @P_DEPOSIT_AMT, @R_MOID, @P_DEPOSIT_NO, @P_DEPOSIT_DT, @R_RETURN_CODE OUT, @R_RETURN_MESSAGE OUT;

			END

			FETCH NEXT FROM CURSOR_DEPOT INTO @P_DEPOSIT_DT, @P_VEN_CODE, @P_DEPOSIT_GB, @P_DEPOSIT_AMT, @P_DEPOSIT_NO, @P_MODE

		END

		CLOSE CURSOR_DEPOT
		DEALLOCATE CURSOR_DEPOT



		/*

		DECLARE CURSOR_DEPOT CURSOR FOR

		SELECT DEPOSIT_DT, VEN_CODE, DEPOSIT_GB, DEPOSIT_AMT, DEPOSIT_NO, MODE FROM @DEPOSIT_ORD_TMP
			
		OPEN CURSOR_DEPOT

		DECLARE @P_DEPOSIT_DT NVARCHAR(11),
				@P_VEN_CODE NVARCHAR(7),
				@P_DEPOSIT_GB NVARCHAR(2),
				@P_DEPOSIT_AMT INT,
				@P_DEPOSIT_NO		NVARCHAR(11),
				@P_MODE			NVARCHAR(1)

		FETCH NEXT FROM CURSOR_DEPOT INTO @P_DEPOSIT_DT, @P_VEN_CODE, @P_DEPOSIT_GB, @P_DEPOSIT_AMT, @P_DEPOSIT_NO, @P_MODE

		WHILE(@@FETCH_STATUS=0)

		BEGIN
			
			
			SET @R_MOID = CAST(@R_MOID AS BIGINT) + 1


			IF @P_MODE = 'I'
			BEGIN
				--#일자별 입금번호 순번 생성
				SET @DEPOSIT_NO = DBO.GET_DEPOSIT_NO(@IDATE)

				INSERT INTO PA_ACCT_DEPOSIT 
				(
					MOID, 
					VEN_CODE,
					DEPOSIT_GB,
					DEPOSIT_NO, 
					DEPOSIT_AMT, 
					DEPOSIT_DT, 
					DEPOSIT_FISH, 
					IDATE,
					IEMP_ID
				)
				VALUES
				(
					@R_MOID, 
					@P_VEN_CODE, 
					@P_DEPOSIT_GB, 
					@DEPOSIT_NO, 
					@P_DEPOSIT_AMT, 
					@IDATE, 
					'Y',
					GETDATE(),
					@P_EMP_ID
				)

				--#주문별 입금처리 등록
				EXEC PR_ACCT_DEPOSIT_ORD_PUT @P_VEN_CODE, @P_DEPOSIT_GB, @P_DEPOSIT_AMT, @R_MOID, @DEPOSIT_NO, @RETURN_CODE OUT, @RETURN_MESSAGE OUT;
			END

			ELSE IF @P_MODE = 'U'
			BEGIN
				--UPDATE PA_ACCT_DEPOSIT_ORD
				--	SET DEL_YN = 'Y'
				--	WHERE VEN_CODE = @P_VEN_CODE 
				--	  AND DEPOSIT_NO = @P_DEPOSIT_NO
				--	  AND DEL_YN = 'N'
		;

				-- 여기서 그냥 입금내역 번호 걸려있는 주문서 N처리 후 인서트 프로시저로 처리하는 거 테스트 해보고 안되는거 있으면 그 때 다시 처리

				-- 기존 입금금액 셋팅
				--SELECT @PRE_DEPOSIT_AMT = DEPOSIT_AMT, @PRE_MOID = MOID FROM PA_ACCT_DEPOSIT WHERE DEPOSIT_NO = @P_DEPOSIT_NO;

				--#주문별 입금처리 차감
				--EXEC PR_ACCT_DEPOSIT_ORD_UPD @P_VEN_CODE, @P_DEPOSIT_GB, @PRE_DEPOSIT_AMT, @P_DEPOSIT_NO, @P_MODE, @RETURN_CODE OUT, @RETURN_MESSAGE OUT;

				UPDATE PA_ACCT_DEPOSIT
					SET DEPOSIT_GB = @P_DEPOSIT_GB
					  , DEPOSIT_AMT = @P_DEPOSIT_AMT
					  , UDATE = GETDATE()
					  , UEMP_ID = @P_EMP_ID
				   WHERE DEPOSIT_NO = @P_DEPOSIT_NO

				--#주문별 입금처리 등록
				EXEC PR_ACCT_DEPOSIT_ORD_PUT @P_VEN_CODE, @P_DEPOSIT_GB, @P_DEPOSIT_AMT, @R_MOID, @P_DEPOSIT_NO, @RETURN_CODE OUT, @RETURN_MESSAGE OUT;

			END

			ELSE IF @P_MODE = 'D'
			BEGIN
				-- 기존 입금금액 셋팅
				SELECT @PRE_DEPOSIT_AMT = DEPOSIT_AMT, @PRE_MOID = MOID FROM PA_ACCT_DEPOSIT WHERE DEPOSIT_NO = @P_DEPOSIT_NO;

				DELETE FROM PA_ACCT_DEPOSIT WHERE DEPOSIT_NO = @P_DEPOSIT_NO;
				
				--#주문별 입금처리 차감
				--EXEC PR_ACCT_DEPOSIT_ORD_UPD @P_VEN_CODE, @P_DEPOSIT_GB, @PRE_DEPOSIT_AMT, @P_DEPOSIT_NO, @P_MODE, @RETURN_CODE OUT, @RETURN_MESSAGE OUT;
			END

			FETCH NEXT FROM CURSOR_DEPOT INTO @P_DEPOSIT_DT, @P_VEN_CODE, @P_DEPOSIT_GB, @P_DEPOSIT_AMT, @P_DEPOSIT_NO, @P_MODE

		END

		CLOSE CURSOR_DEPOT
		DEALLOCATE CURSOR_DEPOT
		
		*/
		
		COMMIT;

	END TRY
	BEGIN CATCH	
				
		IF @@TRANCOUNT > 0
		BEGIN 
		
			IF CURSOR_STATUS('global', 'CURSOR_DEPOT') >= 0
			BEGIN
				CLOSE CURSOR_DEPOT;
				DEALLOCATE CURSOR_DEPOT;
			END

			ROLLBACK TRAN
			
			--에러 로그 테이블 저장
			INSERT INTO TBL_ERROR_LOG 
			SELECT ERROR_PROCEDURE()			-- 프로시저명
					, ERROR_MESSAGE()			-- 에러메시지
					, ERROR_LINE()				-- 에러라인
					, GETDATE()	

			
			SET @R_RETURN_CODE = -1
			SET @R_RETURN_MESSAGE = ERROR_MESSAGE()
			--SELECT -1 AS RETURN_CODE, ERROR_MESSAGE() AS RETURN_MESSAGE

		END 
	END CATCH
	
END



--USE [UMAC_ERP_DEV]
--GO
--/****** Object:  StoredProcedure [dbo].[PR_ACCT_DEPOSIT_MANUAL_PUT]    Script Date: 2024-06-26 오전 10:34:06 ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO

--/*

---- 생성자 :	이동호
---- 등록일 :	2024.05.23
---- 수정자 : -
---- 수정일 : -
---- 설 명  : 입금내역 수동 등록
---- 실행문 : 

--DECLARE @P_JSONDT VARCHAR(8000) = '
--[
--	{"SALE_DT":"20240604", "VEN_CODE":"UM20070", "DEPOSIT_GB":"01", "SALE_TOTAL_AMT":"1000"},
--	{"SALE_DT":"20240604", "VEN_CODE":"UM20071", "DEPOSIT_GB":"01", "SALE_TOTAL_AMT":"2000"},
--	{"SALE_DT":"20240604", "VEN_CODE":"UM20072", "DEPOSIT_GB":"01", "SALE_TOTAL_AMT":"1000"}
--]
--'
--EXEC PR_ACCT_DEPOSIT_MANUAL_PUT @P_JSONDT
----
--*/
--ALTER PROCEDURE [dbo].[PR_ACCT_DEPOSIT_MANUAL_PUT]
--( 
	
--	@P_JSONDT		VARCHAR(8000) = ''

--)
--AS
--BEGIN
--SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

--	DECLARE @RETURN_CODE INT = 0									-- 리턴코드(저장완료)
--	DECLARE @RETURN_MESSAGE NVARCHAR(MAX) = DBO.GET_ERR_MSG('0')	-- 리턴메시지
--	DECLARE @IDATE VARCHAR(8) = FORMAT(GETDATE(), 'yyyyMMdd')	
--	DECLARE @REQ_AMT INT = 0
--	DECLARE @RECEIVE_YN VARCHAR(1) = 'N'
	
--	DECLARE @DEPOSIT_NO_CNT INT,
--			@DEPOSIT_NO NVARCHAR(11);

--	DECLARE @R_MOID NVARCHAR(100)

--	BEGIN TRAN
--	BEGIN TRY 	


--		EXEC PR_ACCT_ORDER_RETURN_ID @R_MOID OUTPUT

--		DECLARE CURSOR_DEPOT CURSOR FOR

--		SELECT SALE_DT, VEN_CODE, DEPOSIT_GB, SALE_TOTAL_AMT FROM 
--			OPENJSON ( @P_JSONDT )   
--				WITH (    
--					SALE_DT NVARCHAR(11) '$.SALE_DT',
--					VEN_CODE NVARCHAR(7) '$.VEN_CODE',
--					DEPOSIT_GB NVARCHAR(2) '$.DEPOSIT_GB',
--					SALE_TOTAL_AMT INT '$.SALE_TOTAL_AMT'
--				)

--		OPEN CURSOR_DEPOT

--		DECLARE @SALE_DT NVARCHAR(11),
--				@VEN_CODE NVARCHAR(7),
--				@DEPOSIT_GB NVARCHAR(2),
--				@SALE_TOTAL_AMT INT

--		FETCH NEXT FROM CURSOR_DEPOT INTO @SALE_DT, @VEN_CODE, @DEPOSIT_GB, @SALE_TOTAL_AMT

--		WHILE(@@FETCH_STATUS=0)

--		BEGIN

--			SET @R_MOID = CAST(@R_MOID AS BIGINT) + 1
			
--			--#일자별 입금번호 순번 생성
--			SET @DEPOSIT_NO = DBO.GET_DEPOSIT_NO(@IDATE)

--			INSERT INTO PA_ACCT_DEPOSIT (
--											MOID, 
--											VEN_CODE,
--											DEPOSIT_GB,
--											DEPOSIT_NO, 
--											DEPOSIT_AMT, 
--											DEPOSIT_DT, 
--											DEPOSIT_FISH, 
--											IDATE
--										)

--			SELECT @R_MOID, @VEN_CODE, @DEPOSIT_GB,  @DEPOSIT_NO, @SALE_TOTAL_AMT, @IDATE, 'Y', GETDATE()
--		​		
--			--#주문별 입금처리 등록
--			EXEC PR_ACCT_DEPOSIT_ORD_PUT @VEN_CODE, @DEPOSIT_GB, @SALE_TOTAL_AMT, @RETURN_CODE OUT, @RETURN_MESSAGE OUT;
			
--			FETCH NEXT FROM CURSOR_DEPOT INTO @SALE_DT, @VEN_CODE, @DEPOSIT_GB, @SALE_TOTAL_AMT

--		END

--		CLOSE CURSOR_DEPOT
--		DEALLOCATE CURSOR_DEPOT
		
--		SELECT @RETURN_CODE AS RETURN_CODE, @RETURN_MESSAGE AS RETURN_MESSAGE

--		COMMIT;

--	END TRY
--	BEGIN CATCH	
				
--		IF @@TRANCOUNT > 0
--		BEGIN 
--			ROLLBACK TRAN
			
--			--에러 로그 테이블 저장
--			INSERT INTO TBL_ERROR_LOG 
--			SELECT ERROR_PROCEDURE()			-- 프로시저명
--					, ERROR_MESSAGE()			-- 에러메시지
--					, ERROR_LINE()				-- 에러라인
--					, GETDATE()	

			
--			SELECT -1 AS RETURN_CODE, ERROR_MESSAGE() AS RETURN_MESSAGE

--		END 
--	END CATCH
	
--END

GO

