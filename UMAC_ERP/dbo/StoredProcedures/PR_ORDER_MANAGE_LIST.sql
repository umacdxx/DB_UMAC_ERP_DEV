/*
-- 생성자 :	강세미
-- 등록일 :	2024.02.28
-- 설 명	:	주문서관리 조회
-- 수정자 :	2024.03.27 이동호 - 튜닝(성능이슈 개선) 
			2024.07.30 강세미 - 샘플 추가(수량,품목)
			2024.11.29 강세미 - 배차여부 수정
			2024.12.16 강세미 - ITM_QTY(품목 수) -> ITM_NAME(제품명)으로 변경
-- 실행문 : 
EXEC PR_ORDER_MANAGE_LIST '','','','','0','20241001','20241010', '2241011002'
*/
CREATE PROCEDURE [dbo].[PR_ORDER_MANAGE_LIST]
( 
	@P_VEN_CODE		NVARCHAR(7) = '',			-- 거래처코드
	@P_ORD_NO		NVARCHAR(11) = '',			-- 주문번호
	@P_SCAN_CODE	NVARCHAR(14) = '',			-- 스캔코드
	@P_ORD_STAT		NVARCHAR(11) = '',			-- 주문상태
	@P_DT_GB		NVARCHAR(1) = '',			-- 조회일자 구분 0: 주문일자 1: 출고일 2:도착일 3: 출고요청일
	@P_START_DT		NVARCHAR(8) = '',			-- 조회시작일자
	@P_END_DT		NVARCHAR(8) = '',			-- 조회종료일자
	@P_MGNT_USER_ID	NVARCHAR(20) = ''			-- 담당자아이디
)
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
 
	BEGIN TRY 
	 
		SELECT ROW_NUMBER() OVER(ORDER BY A.DELIVERY_REQ_DT) AS ROW_NUM
			, A.ORD_NO
			, A.ORD_DT
			, A.ORD_AMT
			, A.PICKING_TOTAL_AMT
			, A.VEN_CODE
			, A.ORD_STAT
			, A.DELIVERY_REQ_DT
			, A.DELIVERY_DEC_DT
			, A.ARRIVAL_REQ_DT
			, A.ARRIVAL_DEC_DT
			, A.ORD_CFM
			, CASE WHEN A.TRANS_YN = 'F' THEN 'FNR배차' WHEN A.TRANS_YN = 'Y' THEN '일반배차' ELSE '배차불필요' END AS TRANS_YN
			, B.ITM_QTY
			, B.TOT_ORD_QTY
			, B.TOT_ORD_WT
			, B.TOT_PICKING_QTY
			, B.TOT_PICKING_WT
			, B.ITM_NAME_LIST
			, C.VEN_NAME	
			, D.TRANS_SECTION
			, E.DELIVERY_NAME
			, F.CD_NM AS ORD_STAT_NM
			, G.ITM_NAME + (CASE WHEN B.ITM_QTY > 1 THEN ' 외 ' + CAST(B.ITM_QTY - 1 AS VARCHAR) + '건' ELSE '' END) AS ITM_NAME	
		FROM PO_ORDER_HDR AS A INNER JOIN (
				SELECT 
					A.ORD_NO, 
					SUM(CASE WHEN E.WEIGHT_GB = 'QTY' THEN D.ORD_QTY ELSE 0 END ) AS TOT_ORD_QTY,
					SUM(CASE WHEN E.WEIGHT_GB = 'WT' THEN D.ORD_QTY ELSE 0 END ) AS TOT_ORD_WT,
					SUM(CASE WHEN E.WEIGHT_GB = 'QTY' THEN D.PICKING_QTY ELSE 0 END ) AS TOT_PICKING_QTY,
					SUM(CASE WHEN E.WEIGHT_GB = 'WT' THEN D.PICKING_QTY ELSE 0 END ) AS TOT_PICKING_WT,
					COUNT(D.ORD_NO) AS ITM_QTY,
					STRING_AGG(E.ITM_NAME, ', ') AS ITM_NAME_LIST,
					MAX(D.SCAN_CODE) AS SCAN_CODE
					FROM PO_ORDER_HDR AS A 
						LEFT OUTER JOIN VIEW_ORDER_DTL_SAMPLE_SUM AS D ON A.ORD_NO = D.ORD_NO
						LEFT OUTER JOIN CD_PRODUCT_CMN AS E ON D.SCAN_CODE = E.SCAN_CODE	 
							WHERE 1 = (CASE WHEN @P_VEN_CODE = '' THEN 1 WHEN @P_VEN_CODE <> '' AND A.VEN_CODE = @P_VEN_CODE THEN 1 ELSE 0 END )
							AND 1 = (CASE WHEN @P_ORD_NO = '' THEN 1 WHEN @P_ORD_NO <> '' AND A.ORD_NO = @P_ORD_NO THEN 1 ELSE 0 END )
							AND 1 = (CASE WHEN @P_ORD_STAT = '' THEN 1 WHEN @P_ORD_STAT <> '' AND A.ORD_STAT = @P_ORD_STAT THEN 1 ELSE 0 END )
							AND 1 = (CASE WHEN @P_SCAN_CODE = '' THEN 1 WHEN @P_SCAN_CODE <> '' AND D.SCAN_CODE = @P_SCAN_CODE THEN 1 ELSE 0 END)
							AND  (
								1 = (CASE WHEN @P_DT_GB = '0' AND A.ORD_DT BETWEEN @P_START_DT AND @P_END_DT THEN 1 ELSE 0 END) OR
								1 = (CASE WHEN @P_DT_GB = '1' AND A.DELIVERY_DEC_DT BETWEEN @P_START_DT AND @P_END_DT THEN 1 ELSE 0 END) OR
								1 = (CASE WHEN @P_DT_GB = '2' AND A.ARRIVAL_DEC_DT BETWEEN @P_START_DT AND @P_END_DT THEN 1 ELSE 0 END) OR
								1 = (CASE WHEN @P_DT_GB = '3' AND A.DELIVERY_REQ_DT BETWEEN @P_START_DT AND @P_END_DT THEN 1 ELSE 0 END)
							)						
				GROUP BY A.ORD_NO
			) AS B ON A.ORD_NO = B.ORD_NO
			INNER JOIN CD_PARTNER_MST AS C 
				ON C.VEN_CODE = A.VEN_CODE
			LEFT OUTER JOIN CD_DELIVERY_PRICE AS D
				ON A.DELIVERY_PRICE_SEQ = D.SEQ
			LEFT OUTER JOIN CD_PARTNER_DELIVERY AS E
				ON A.VEN_CODE = E.VEN_CODE AND E.DELIVERY_CODE = A.DELIVERY_CODE
			LEFT OUTER JOIN TBL_COMM_CD_MST AS F 
				ON F.CD_CL = 'ORD_STAT' AND A.ORD_STAT = F.CD_ID
			LEFT OUTER JOIN CD_PRODUCT_CMN AS G ON B.SCAN_CODE = G.SCAN_CODE	 
			WHERE 1 = (CASE WHEN @P_MGNT_USER_ID = '' THEN 1 WHEN @P_MGNT_USER_ID = 'ETC' AND (C.MGNT_USER_ID IS NULL OR C.MGNT_USER_ID = '') THEN 1 WHEN @P_MGNT_USER_ID <> '' AND C.MGNT_USER_ID = @P_MGNT_USER_ID THEN 1 ELSE 0 END)
			ORDER BY A.DELIVERY_REQ_DT
	
	END TRY
	
	BEGIN CATCH		
		--에러 로그 테이블 저장
		INSERT INTO TBL_ERROR_LOG 
		SELECT ERROR_PROCEDURE()	-- 프로시저명
		, ERROR_MESSAGE()			-- 에러메시지
		, ERROR_LINE()				-- 에러라인
		, GETDATE()	
	END CATCH
	
END

GO

