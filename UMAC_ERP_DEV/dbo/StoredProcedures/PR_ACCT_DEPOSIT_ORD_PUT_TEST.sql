
/*

-- 생성자 :	이동호
-- 등록일 :	2024.06.24
-- 수정자 : -
-- 수정일 : -
-- 설 명  : 주문별 입금처리 등록
-- 실행문 : 


DECLARE @R_RETURN_CODE 		INT
DECLARE @R_RETURN_MESSAGE 	NVARCHAR(2000)
EXEC PR_ACCT_DEPOSIT_ORD_PUT 'UM20127', '01', 100000, '1', '1',@R_RETURN_CODE OUT, @R_RETURN_MESSAGE OUT
GO
DECLARE @R_RETURN_CODE 		INT
DECLARE @R_RETURN_MESSAGE 	NVARCHAR(2000)
EXEC PR_ACCT_DEPOSIT_ORD_PUT 'UM20127', '01', 200000, '2', '2',@R_RETURN_CODE OUT, @R_RETURN_MESSAGE OUT
GO
DECLARE @R_RETURN_CODE 		INT
DECLARE @R_RETURN_MESSAGE 	NVARCHAR(2000)
EXEC PR_ACCT_DEPOSIT_ORD_PUT 'UM20127', '01', 710000, '3', '3',@R_RETURN_CODE OUT, @R_RETURN_MESSAGE OUT
GO
DECLARE @R_RETURN_CODE 		INT
DECLARE @R_RETURN_MESSAGE 	NVARCHAR(2000)
EXEC PR_ACCT_DEPOSIT_ORD_PUT 'UM20127', '01', 5000, '4', '4',@R_RETURN_CODE OUT, @R_RETURN_MESSAGE OUT

GO

DECLARE @R_RETURN_CODE 		INT
DECLARE @R_RETURN_MESSAGE 	NVARCHAR(2000)
EXEC PR_ACCT_DEPOSIT_ORD_PUT 'UM20127', '01', 910000, '4', '4',@R_RETURN_CODE OUT, @R_RETURN_MESSAGE OUT
GO

DECLARE @R_RETURN_CODE 		INT
DECLARE @R_RETURN_MESSAGE 	NVARCHAR(2000)
EXEC PR_ACCT_DEPOSIT_ORD_PUT 'UM20127', '01', 1100000, '5', '5',@R_RETURN_CODE OUT, @R_RETURN_MESSAGE OUT


DECLARE @R_RETURN_CODE 		INT
DECLARE @R_RETURN_MESSAGE 	NVARCHAR(2000)
EXEC PR_ACCT_DEPOSIT_ORD_PUT 'UM20127', '01', 900000, '6', '6',@R_RETURN_CODE OUT, @R_RETURN_MESSAGE OUT
EXEC PR_ACCT_DEPOSIT_ORD_PUT 'UM20127', '01', 990000, '7', '7',@R_RETURN_CODE OUT, @R_RETURN_MESSAGE OUT

SELECT @R_RETURN_CODE, @R_RETURN_MESSAGE


SELECT * FROM PA_ACCT_DEPOSIT_ORD
*/
CREATE PROCEDURE [dbo].[PR_ACCT_DEPOSIT_ORD_PUT_TEST]
( 	
	@P_VEN_CODE			NVARCHAR(11),			-- 거래처코드
	@P_DEPOSIT_GB		NVARCHAR(2),			-- 입금구분
	@P_DEPOSIT_AMT		INT,					-- 입금금액
	@P_MOID				NVARCHAR(100),			-- PG주문번호
	@P_DEPOSIT_NO		NVARCHAR(11),			-- 입금번호
	@P_DEPOSIT_DT		NVARCHAR(11),			-- 입금날짜
	@R_RETURN_CODE 		INT 			OUTPUT,	-- 리턴코드
	@R_RETURN_MESSAGE 	NVARCHAR(2000) 	OUTPUT 	-- 리턴메시지
	
)
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SET @R_RETURN_CODE = 0									-- 리턴코드(저장완료)
	SET @R_RETURN_MESSAGE = DBO.GET_ERR_MSG('0')			-- 리턴메시지
	--DECLARE @DEPOSIT_DT	NVARCHAR(8) = FORMAT(GETDATE(), 'yyyyMMdd')
	DECLARE @DEPOSIT_DT	NVARCHAR(8) = @P_DEPOSIT_DT

	BEGIN TRAN
	BEGIN TRY 	
		DECLARE	@DEPOSIT_NO NVARCHAR(11) = ''
		DECLARE @IN_AMT INT
		DECLARE @IDATE DATETIME				
		DECLARE @V_DEPOSIT_AMT INT = @P_DEPOSIT_AMT
		DECLARE @DEPOSIT_AMT_SUM INT = 0	
		DECLARE @DEPOSIT_ORD_CNT INT = 0
		DECLARE @SALE_DT NVARCHAR(8) = '',
				@ORD_NO NVARCHAR(11) = '',
				@SALE_TOTAL_AMT INT,			
				@DEPOSIT_AMT INT
				
		DECLARE CURSOR_ORD CURSOR FOR 
			
			SELECT SALE_DT, ORD_NO, SALE_TOTAL_AMT, DEPOSIT_NO, DEPOSIT_AMT FROM PA_ACCT_DEPOSIT_ORD WHERE VEN_CODE = @P_VEN_CODE AND DEPOSIT_FISH = 'N' AND SALE_TOTAL_AMT > 0 AND DEL_YN = 'N' ORDER BY SALE_DT ASC, ORD_NO ASC

		OPEN CURSOR_ORD
 
		FETCH NEXT FROM CURSOR_ORD
			INTO @SALE_DT, @ORD_NO, @SALE_TOTAL_AMT, @DEPOSIT_NO, @DEPOSIT_AMT
		WHILE @@FETCH_STATUS = 0 
		BEGIN
			
			--해당 주문건의 입금된 총합
			SELECT @SALE_TOTAL_AMT = ISNULL(SUM(SALE_TOTAL_AMT), 0), @DEPOSIT_AMT_SUM = ISNULL(SUM(DEPOSIT_AMT), 0), @DEPOSIT_ORD_CNT = COUNT(1) FROM PA_ACCT_DEPOSIT_ORD WHERE ORD_NO = @ORD_NO  AND DEL_YN = 'N'

			--@P_DEPOSIT_AMT	: 입금 금액				
			--@SALE_TOTAL_AMT	: 매출 금액
			--@DEPOSIT_AMT		: 기존 입금된 금액
			--@DEPOSIT_AMT_SUM	: 해당 주문건의 입금된 총합
			
			--PRINT '입금금액(@P_DEPOSIT_AMT) : ' + CAST(@P_DEPOSIT_AMT AS VARCHAR) + 
			--', 매출금액(@SALE_TOTAL_AMT) : ' + CAST(@SALE_TOTAL_AMT AS VARCHAR) + 
			--', 기존 입금된 총금액 (@DEPOSIT_AMT_SUM) : ' + CAST(@DEPOSIT_AMT_SUM AS VARCHAR) + 
			--', @V_DEPOSIT_AMT : ' + CAST(@V_DEPOSIT_AMT AS VARCHAR) 
				
			--입금금액 계산
			SET @DEPOSIT_AMT = (CASE WHEN (@DEPOSIT_AMT_SUM + @P_DEPOSIT_AMT) > @SALE_TOTAL_AMT THEN @SALE_TOTAL_AMT - @DEPOSIT_AMT_SUM  ELSE @V_DEPOSIT_AMT END )

			IF(@V_DEPOSIT_AMT > 0 AND @DEPOSIT_AMT > 0)
			BEGIN 																 
				
				INSERT INTO PA_ACCT_DEPOSIT_ORD (SALE_DT, ORD_NO, VEN_CODE, SALE_TOTAL_AMT, DEPOSIT_GB, DEPOSIT_NO, MOID, DEPOSIT_AMT, DEPOSIT_DT, DEPOSIT_FISH, IDATE)
					SELECT 
						@SALE_DT,			--출고일자
						@ORD_NO,			--주문번호
						@P_VEN_CODE,		--거래처 코드
						0,					--판매금액 : 0원처리 부모가 판매금액 할당되어 있음
						@P_DEPOSIT_GB,		--입금구분
						@P_DEPOSIT_NO,		--입금번호
						@P_MOID, 			--PG주문아이디
						@DEPOSIT_AMT,		--입금금액									
						@DEPOSIT_DT, 						
						(CASE WHEN (@DEPOSIT_AMT_SUM + @V_DEPOSIT_AMT) < @SALE_TOTAL_AMT THEN 'N' ELSE 'Y' END ), 
						GETDATE()																	
				
				-- 판매금액보다 해당 주문건의 입금금액 총합이 클경우 해당 주문건의 입금처리 내역 일괄 입금완료 처리
				IF @SALE_TOTAL_AMT <= (@DEPOSIT_AMT_SUM + @V_DEPOSIT_AMT) BEGIN
					UPDATE PA_ACCT_DEPOSIT_ORD SET DEPOSIT_FISH = 'Y' WHERE ORD_NO = @ORD_NO AND DEL_YN = 'N'
				END
			END
					
			SET @V_DEPOSIT_AMT = (@V_DEPOSIT_AMT + @DEPOSIT_AMT_SUM) - @SALE_TOTAL_AMT


			/*

			--미수금액 
			SELECT @DEPOSIT_AMT_SUM = ISNULL(SUM(DEPOSIT_AMT), 0) FROM PA_ACCT_DEPOSIT_ORD WHERE ORD_NO = @ORD_NO AND DEL_YN = 'N'
			
			SET @V_DEPOSIT_AMT = @V_DEPOSIT_AMT + @DEPOSIT_AMT_SUM

			IF @V_DEPOSIT_AMT > 0 
			BEGIN
				
				PRINT '@P_DEPOSIT_AMT : ' + CAST(@P_DEPOSIT_AMT AS VARCHAR)
				PRINT '@SALE_TOTAL_AMT : ' + CAST(@SALE_TOTAL_AMT AS VARCHAR)
				PRINT '@V_DEPOSIT_AMT : ' + CAST(@V_DEPOSIT_AMT AS VARCHAR)
				PRINT '@DEPOSIT_AMT : ' + CAST(@DEPOSIT_AMT AS VARCHAR)

				IF @SALE_TOTAL_AMT <= (@V_DEPOSIT_AMT)
				BEGIN
					IF @DEPOSIT_AMT > 0 
					BEGIN

						UPDATE PA_ACCT_DEPOSIT_ORD SET DEPOSIT_FISH = 'Y'  WHERE ORD_NO = @ORD_NO AND DEL_YN = 'N'
												
						INSERT INTO PA_ACCT_DEPOSIT_ORD (SALE_DT, ORD_NO, VEN_CODE, SALE_TOTAL_AMT, DEPOSIT_GB, DEPOSIT_NO, MOID, DEPOSIT_AMT, DEPOSIT_DT, DEPOSIT_FISH, IDATE)
						SELECT @SALE_DT, @ORD_NO, @P_VEN_CODE, 0, @P_DEPOSIT_GB, @P_DEPOSIT_NO, @P_MOID, ((@SALE_TOTAL_AMT - @DEPOSIT_AMT_SUM)), @DEPOSIT_DT, 'Y', GETDATE()											
						PRINT 'ST3'

					END
					ELSE 
					BEGIN
						--# 미수 금액이 없는 조건 업데이트
												
						
						PRINT '@SALE_TOTAL_AMT : ' + CAST(@SALE_TOTAL_AMT AS VARCHAR) + ', DEPOSIT_TOTAL_SUM : '+ CAST(@DEPOSIT_AMT_SUM + @P_DEPOSIT_AMT AS VARCHAR)

						IF(@DEPOSIT_AMT_SUM + @P_DEPOSIT_AMT) > @SALE_TOTAL_AMT
						BEGIN 

							UPDATE PA_ACCT_DEPOSIT_ORD SET DEPOSIT_FISH = 'Y' 
								WHERE ORD_NO = @ORD_NO AND DEL_YN = 'N'
						END 



						UPDATE PA_ACCT_DEPOSIT_ORD SET 
								DEPOSIT_GB = @P_DEPOSIT_GB, 
								DEPOSIT_NO = @P_DEPOSIT_NO, 
								MOID = @P_MOID, 
								--DEPOSIT_AMT = @SALE_TOTAL_AMT, 
								DEPOSIT_AMT = @P_DEPOSIT_AMT, 
								DEPOSIT_DT = @DEPOSIT_DT,
								DEPOSIT_FISH = 'Y' 
							WHERE ORD_NO = @ORD_NO
								AND DEPOSIT_NO = (CASE WHEN DEPOSIT_NO = '' THEN DEPOSIT_NO ELSE @P_DEPOSIT_NO END)
								AND DEL_YN = 'N'

						PRINT 'ST4'
					END

				END
				ELSE
				BEGIN
					
					IF @DEPOSIT_AMT > 0 
					BEGIN

						INSERT INTO PA_ACCT_DEPOSIT_ORD (SALE_DT, ORD_NO, VEN_CODE, SALE_TOTAL_AMT, DEPOSIT_GB, DEPOSIT_NO, MOID, DEPOSIT_AMT, DEPOSIT_DT, DEPOSIT_FISH, IDATE)
							SELECT @SALE_DT, @ORD_NO, @P_VEN_CODE, 0, @P_DEPOSIT_GB, @P_DEPOSIT_NO, @P_MOID, @V_DEPOSIT_AMT - @DEPOSIT_AMT_SUM, @DEPOSIT_DT, 'N', GETDATE()
						
						PRINT 'ST1'
					 END 
					 ELSE 
					 BEGIN
						--# 미수 금액이 있을 경우 업데이트					
						UPDATE PA_ACCT_DEPOSIT_ORD SET 
								DEPOSIT_GB = @P_DEPOSIT_GB, 
								DEPOSIT_NO = @P_DEPOSIT_NO, 
								MOID = @P_MOID, 
								DEPOSIT_AMT = @V_DEPOSIT_AMT, 
								DEPOSIT_DT = @DEPOSIT_DT, 
								DEPOSIT_FISH = 'N' 
							WHERE ORD_NO = @ORD_NO
									AND DEPOSIT_NO = (CASE WHEN DEPOSIT_NO = '' THEN DEPOSIT_NO ELSE @P_DEPOSIT_NO END)
									AND DEL_YN = 'N'
							
						PRINT 'ST2'
					 END

										 
				END
							
				SET @V_DEPOSIT_AMT = @V_DEPOSIT_AMT - @SALE_TOTAL_AMT

				--PRINT '@V_DEPOSIT_AMT : ' + CAST(@V_DEPOSIT_AMT AS VARCHAR)
			END
			*/







			/*
			SET @P_DEPOSIT_AMT = @P_DEPOSIT_AMT + @DEPOSIT_AMT
			

			IF @P_DEPOSIT_AMT > 0
			BEGIN
				--900000 : 900020
				IF @SALE_TOTAL_AMT <= (@P_DEPOSIT_AMT + @DEPOSIT_AMT)
				BEGIN
					 
					IF @DEPOSIT_AMT > 0 
					BEGIN 
																
						UPDATE PA_ACCT_DEPOSIT_ORD SET DEPOSIT_FISH = 'Y'  WHERE ORD_NO = @ORD_NO

						--# 미수금 있있을 경우 해당 주문번호 입금처리내역 신규 등록
						
						--900000 + 30 - 
						
						--900000 - 30

						INSERT INTO PA_ACCT_DEPOSIT_ORD (SALE_DT, ORD_NO, VEN_CODE, SALE_TOTAL_AMT, DEPOSIT_GB, DEPOSIT_NO, MOID, DEPOSIT_AMT, DEPOSIT_DT, DEPOSIT_FISH, IDATE)
						SELECT @SALE_DT, @ORD_NO, @P_VEN_CODE, 0, @P_DEPOSIT_GB, @P_DEPOSIT_NO, @P_MOID, (@P_DEPOSIT_AMT - @DEPOSIT_AMT - @DEPOSIT_AMT), @DEPOSIT_DT, 'Y', GETDATE()

						PRINT @P_DEPOSIT_AMT 
						PRINT 'ST3'
					END
					ELSE
					BEGIN
						
						--# 미수 금액이 없는 조건 업데이트
						UPDATE PA_ACCT_DEPOSIT_ORD SET 
								DEPOSIT_GB = @P_DEPOSIT_GB, 
								DEPOSIT_NO = @P_DEPOSIT_NO, 
								MOID = @P_MOID, 
								DEPOSIT_AMT = @SALE_TOTAL_AMT, 
								DEPOSIT_DT = @DEPOSIT_DT,
								DEPOSIT_FISH = 'Y' 
							WHERE ORD_NO = @ORD_NO
					END
										
				END
				ELSE
				BEGIN
					
					--PRINT CAST(@SALE_TOTAL_AMT AS VARCHAR) + ',' + CAST(@P_DEPOSIT_AMT AS VARCHAR)

					IF @DEPOSIT_AMT > 0 
					BEGIN

						--PRINT CAST(@P_DEPOSIT_AMT AS VARCHAR) + ',' + CAST(@V_DEPOSIT_AMT AS VARCHAR)

						INSERT INTO PA_ACCT_DEPOSIT_ORD (SALE_DT, ORD_NO, VEN_CODE, SALE_TOTAL_AMT, DEPOSIT_GB, DEPOSIT_NO, MOID, DEPOSIT_AMT, DEPOSIT_DT, DEPOSIT_FISH, IDATE)
							SELECT @SALE_DT, @ORD_NO, @P_VEN_CODE, 0, @P_DEPOSIT_GB, @P_DEPOSIT_NO, @P_MOID, @V_DEPOSIT_AMT, @DEPOSIT_DT, 'N', GETDATE()
						
						PRINT 'ST1'
					 END 
					 ELSE 
					 BEGIN
						--# 미수 금액이 있을 경우 업데이트					
						UPDATE PA_ACCT_DEPOSIT_ORD SET 
								DEPOSIT_GB = @P_DEPOSIT_GB, 
								DEPOSIT_NO = @P_DEPOSIT_NO, 
								MOID = @P_MOID, 
								DEPOSIT_AMT = @P_DEPOSIT_AMT, 
								DEPOSIT_DT = @DEPOSIT_DT, 
								DEPOSIT_FISH = 'N' 
							WHERE ORD_NO = @ORD_NO		
							
						PRINT 'ST2'
					 END

										 
				END
			
				
			END
			*/
			

			--SET @P_DEPOSIT_AMT = @P_DEPOSIT_AMT - @SALE_TOTAL_AMT
			
			FETCH NEXT FROM CURSOR_ORD
    			INTO @SALE_DT, @ORD_NO, @SALE_TOTAL_AMT, @DEPOSIT_NO, @DEPOSIT_AMT
		END
 
		CLOSE CURSOR_ORD
		DEALLOCATE CURSOR_ORD

		--PRINT '입금금액 남은 금액 : ' + CAST(@V_DEPOSIT_AMT AS VARCHAR)

		-- 커서에 ORD_NO가 없으므로 가장 최근 주문서 셀렉
		IF @ORD_NO = ''
		BEGIN
			SELECT TOP 1 @ORD_NO = ORD_NO FROM PA_ACCT_DEPOSIT_ORD WHERE VEN_CODE = @P_VEN_CODE AND DEPOSIT_FISH = 'Y' ORDER BY SALE_DT DESC, ORD_NO DESC
		END

		--초과 입금 금액 업데이트		
		IF @V_DEPOSIT_AMT > 0
		BEGIN			
		
			--마지막 주문번호가 미수금 처리로 인한 ROW > 1 인 경우 마지막 날짜 기준 업데이트
			SELECT TOP 1 @IDATE = IDATE FROM PA_ACCT_DEPOSIT_ORD WHERE ORD_NO = @ORD_NO ORDER BY IDATE DESC 
			
			INSERT INTO PA_ACCT_DEPOSIT_ORD (SALE_DT, ORD_NO, VEN_CODE, SALE_TOTAL_AMT, DEPOSIT_GB, DEPOSIT_NO, MOID, DEPOSIT_AMT, DEPOSIT_DT, DEPOSIT_FISH, IDATE)
				SELECT TOP 1 SALE_DT, ORD_NO, VEN_CODE, SALE_TOTAL_AMT, DEPOSIT_GB, @P_DEPOSIT_NO, MOID, -@V_DEPOSIT_AMT , DEPOSIT_DT, DEPOSIT_FISH, GETDATE() AS IDATE 
					FROM PA_ACCT_DEPOSIT_ORD WHERE ORD_NO = @ORD_NO AND IDATE = @IDATE 
																				
		END
	
		COMMIT;

	END TRY
	BEGIN CATCH	
				
		IF @@TRANCOUNT > 0
		BEGIN 
			ROLLBACK TRAN
						
			IF CURSOR_STATUS('global', 'CURSOR_ORD') >= 0
			BEGIN				
				CLOSE CURSOR_ORD
				DEALLOCATE CURSOR_ORD
			END

			--에러 로그 테이블 저장
			INSERT INTO TBL_ERROR_LOG 
			SELECT ERROR_PROCEDURE()			-- 프로시저명
					, ERROR_MESSAGE()			-- 에러메시지
					, ERROR_LINE()				-- 에러라인
					, GETDATE()	

			
			SET @R_RETURN_CODE = -1
			SET @R_RETURN_MESSAGE = ERROR_MESSAGE()
			
		END 
	END CATCH
	
END

GO

