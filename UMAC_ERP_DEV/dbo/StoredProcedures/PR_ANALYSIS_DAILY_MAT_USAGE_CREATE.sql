
/*

-- 생성자 :	윤현빈
-- 등록일 :	2024.08.29
-- 설 명  : 생산/부자재 일보 생성
-- 실행문 : 

EXEC PR_ANALYSIS_DAILY_MAT_USAGE_CREATE '','','','',''

*/
CREATE PROCEDURE [dbo].[PR_ANALYSIS_DAILY_MAT_USAGE_CREATE]
( 
	@P_REPORT_DATE		NVARCHAR(8) = '',
	@P_EMP_ID			NVARCHAR(20)		-- 아이디
)
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	DECLARE @RETURN_CODE	INT = 0										-- 리턴코드(저장완료)
	DECLARE @RETURN_MESSAGE NVARCHAR(MAX) = DBO.GET_ERR_MSG('0')		-- 리턴메시지
	
	BEGIN TRAN
	BEGIN TRY 

----------------------------------------
-- 1. 입고/출고 일보 (원재료, 부자재) 삽입
----------------------------------------
		CREATE TABLE #TEMP_REMARKS_DATA (
			REPORT_DATE NVARCHAR(8),
			SCAN_CODE NVARCHAR(14),
			REMARKS NVARCHAR(2000)
		);

		INSERT INTO #TEMP_REMARKS_DATA (REPORT_DATE, SCAN_CODE, REMARKS)
		SELECT A.REPORT_DATE
		     , A.SCAN_CODE
			 , A.REMARKS
			FROM RP_ANALYSIS_DAILY_PROD_MAT_USAGE AS A
		   WHERE REPORT_DATE = @P_REPORT_DATE;
		;
		
----------------------------------------
-- 해당일자 삭제
----------------------------------------
		DELETE FROM RP_ANALYSIS_DAILY_PROD_MAT_USAGE WHERE REPORT_DATE = @P_REPORT_DATE;

----------------------------------------
-- 해당일자 일보 생성
----------------------------------------
		WITH W_CAP_DATA AS (
			SELECT A.PROD_DT
				 , A.SCAN_CODE
				 , A.COMP_CODE
				 , A.INPUT_QTY
				 --, SUM(A.INPUT_QTY) OVER(PARTITION BY A.COMP_CODE ORDER BY A.PROD_DT) AS CUM_INPUT_QTY
				 , SUM(A.INPUT_QTY) OVER(PARTITION BY A.COMP_CODE ORDER BY A.PROD_DT) AS CUM_LUTEN_INPUT_QTY
				 , SUM(A.INPUT_QTY) OVER(PARTITION BY A.SCAN_CODE, A.COMP_CODE ORDER BY A.PROD_DT) AS CUM_LABEL_INPUT_QTY
				FROM PD_MAT_USAGE AS A
			   WHERE YYYYMM = LEFT(@P_REPORT_DATE, 6)
				 AND PROD_DT <= @P_REPORT_DATE
				 AND MAT_GB = '1'
		), W_CAN_DATA AS (
			SELECT A.PROD_DT
				 , A.SCAN_CODE
				 , C.CD_ID AS COMP_CODE
				 , A.PROD_APP_QTY AS PROD_QTY
				 , CAST(ROUND(A.PROD_APP_QTY / C.MGMT_ENTRY_3, 0) AS INT) AS INPUT_QTY
				FROM CD_LOT_MST AS A
				INNER JOIN CD_PRODUCT_CMN AS B ON A.SCAN_CODE = B.SCAN_CODE
				INNER JOIN TBL_COMM_CD_MST AS C ON B.MID_CODE = C.MGMT_ENTRY_1 AND B.UNIT_CAPACITY = C.MGMT_ENTRY_2 AND C.CD_CL = 'MAPPING_CAN_PAD' AND DEL_YN = 'N'
			   WHERE PROD_DT = @P_REPORT_DATE
			     AND A.CFM_FLAG = 'Y'
		), W_LUTEN as (
			SELECT A.PROD_DT
				 , A.SCAN_CODE
				 , B.MGMT_ENTRY_1 AS COMP_CODE
				 , '2' AS MAT_GB
				 , LEFT(A.PROD_DT, 6) AS YYYYMM
				 , CAST(ROUND(A.CUM_LUTEN_INPUT_QTY / CAST(B.MGMT_ENTRY_DESCRIPTION_1 AS DECIMAL), 0) - COALESCE(LAG(ROUND(A.CUM_LUTEN_INPUT_QTY / CAST(B.MGMT_ENTRY_DESCRIPTION_1 AS DECIMAL), 0)) 
				   OVER (PARTITION BY A.COMP_CODE ORDER BY A.PROD_DT), 0) AS INT) AS INPUT_QTY
				FROM W_CAP_DATA AS A
				INNER JOIN TBL_COMM_CD_MST AS B ON A.COMP_CODE = B.CD_ID AND B.CD_CL = 'MAPPING_CAP_LUTEN' AND DEL_YN = 'N'
		), W_LABEL AS (
			SELECT A.PROD_DT
				 , A.SCAN_CODE
				 , B.MGMT_ENTRY_1 AS COMP_CODE
				 , '3' AS MAT_GB
				 , LEFT(A.PROD_DT, 6) AS YYYYMM
				 , CAST(ROUND(A.CUM_LUTEN_INPUT_QTY / CAST(B.MGMT_ENTRY_DESCRIPTION_1 AS DECIMAL), 0) - COALESCE(LAG(ROUND(A.CUM_LUTEN_INPUT_QTY / CAST(B.MGMT_ENTRY_DESCRIPTION_1 AS DECIMAL), 0)) 
				   OVER (PARTITION BY A.SCAN_CODE, A.COMP_CODE ORDER BY A.PROD_DT), 0) AS INT) AS INPUT_QTY
				FROM W_CAP_DATA AS A
				INNER JOIN TBL_COMM_CD_MST AS B ON A.SCAN_CODE = B.CD_ID AND B.CD_CL = 'MAPPING_CAP_LABEL' AND DEL_YN = 'N'
		), W_PAD AS (
			SELECT A.PROD_DT
				 , A.SCAN_CODE
				 , A.COMP_CODE
				 , '4' AS MAT_GB
				 , LEFT(A.PROD_DT, 6) AS YYYYMM
				 , INPUT_QTY
				FROM W_CAN_DATA AS A
		), W_RESULT AS (
			SELECT * FROM W_LUTEN AS A WHERE A.PROD_DT = @P_REPORT_DATE AND INPUT_QTY != 0
			UNION ALL
			SELECT * FROM W_LABEL AS A WHERE A.PROD_DT = @P_REPORT_DATE AND INPUT_QTY != 0
			UNION ALL
			SELECT * FROM W_PAD AS A WHERE A.PROD_DT = @P_REPORT_DATE AND A.INPUT_QTY != 0
		)
		MERGE INTO PD_MAT_USAGE AS A
			USING W_RESULT AS B
			ON (A.PROD_DT = B.PROD_DT AND A.SCAN_CODE = B.SCAN_CODE AND A.COMP_CODE = B.COMP_CODE)
		WHEN MATCHED THEN 
			UPDATE
				SET INPUT_QTY = B.INPUT_QTY
				  , UDATE = GETDATE()
				  , UEMP_ID = @P_EMP_ID
		WHEN NOT MATCHED THEN
			INSERT
			(
				PROD_DT
			  , SCAN_CODE
              , COMP_CODE
              , MAT_GB
              , YYYYMM
              , INPUT_QTY
              , IDATE
              , IEMP_ID
              , UDATE
              , UEMP_ID
			)
			VALUES
			(
				B.PROD_DT
			  , B.SCAN_CODE
			  , B.COMP_CODE
			  , B.MAT_GB
			  , B.YYYYMM
			  , B.INPUT_QTY
			  , GETDATE()
			  , @P_EMP_ID
			  , NULL
			  , NULL
			)
		;

		INSERT INTO RP_ANALYSIS_DAILY_PROD_MAT_USAGE
		SELECT A.REPORT_DATE
		     , A.SCAN_CODE
			 , A.REMARKS
			 , GETDATE()
			 , @P_EMP_ID
			 , NULL
			 , NULL
			FROM #TEMP_REMARKS_DATA AS A
			LEFT OUTER JOIN (
				SELECT PROD_DT, COMP_CODE
					FROM PD_MAT_USAGE
				   WHERE PROD_DT = @P_REPORT_DATE
				   GROUP BY PROD_DT, COMP_CODE
			) AS B ON A.REPORT_DATE = B.PROD_DT AND A.SCAN_CODE = B.COMP_CODE
		   WHERE A.REPORT_DATE = @P_REPORT_DATE
		;

		DROP TABLE #TEMP_REMARKS_DATA;

	COMMIT;
	END TRY
	
	BEGIN CATCH	
		
		IF @@TRANCOUNT > 0
		BEGIN 
			ROLLBACK TRAN
			SET @RETURN_CODE = -1
			SET @RETURN_MESSAGE = ERROR_MESSAGE()
			
			DROP TABLE IF EXISTS #TEMP_REMARKS_DATA;

			--에러 로그 테이블 저장
			INSERT INTO TBL_ERROR_LOG 
			SELECT ERROR_PROCEDURE()		-- 프로시저명
				, ERROR_MESSAGE()			-- 에러메시지
				, ERROR_LINE()				-- 에러라인
				, GETDATE()	
		END 
	END CATCH
	SELECT @RETURN_CODE AS RETURN_CODE, @RETURN_MESSAGE AS RETURN_MESSAGE 
END

GO

