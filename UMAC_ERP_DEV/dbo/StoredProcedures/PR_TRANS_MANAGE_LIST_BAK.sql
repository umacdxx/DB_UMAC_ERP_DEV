/*
-- 생성자 :	강세미
-- 등록일 :	2023.03.15
-- 설 명  : 배차관리 리스트 조회(수정예정)
-- 수정자 :	이동호
-- 수정일 :	2024.03.26
-- 설 명  : 튜닝(성능이슈 개선) 
-- 실행문 : 
EXEC PR_TRANS_MANAGE_LIST '','','','20240326','20240402','','','','','','','100','0'
*/
CREATE PROCEDURE [dbo].[PR_TRANS_MANAGE_LIST_BAK]
( 
	@P_ORD_NO					NVARCHAR(11) = '',				-- 주문번호
	@P_IO_GB					NVARCHAR(1) = '',				-- 입출고구분
	@P_VEN_CODE					NVARCHAR(8) = '',				-- 거래처코드
	@P_S_ORD_DT					NVARCHAR(8) = '',				-- 주문(발주) 조회시작일자
	@P_E_ORD_DT					NVARCHAR(8) = '',				-- 주문(발주) 조회종료일자
	@P_S_DELIVERY_REQ_DT		NVARCHAR(8) = '',				-- 출고요청일 조회시작일자
	@P_E_DELIVERY_REQ_DT		NVARCHAR(8) = '',				-- 출고요청일 조회종료일자
	@P_SCAN_CODE				NVARCHAR(14) = '',				-- 상품코드
	@P_ORD_STAT					NVARCHAR(2) = '',				-- 주문상태
	@P_PUR_STAT					NVARCHAR(2) = '',				-- 발주상태
	@P_CAR_NO					NVARCHAR(8) = '',				-- 차량번호
	@P_TOT_PAGE_ROW				INT,							-- 한 페이지에 나타나는 row 수
	@P_PAGE_INDEX				INT 							-- page row 인덱스
)
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
 
BEGIN TRY
		
		-- 리스트 TOTAL COUNT 
		DECLARE @TOT_CNT INT = 0;

		 --# TOTAL COUNT #	
		WITH TOTAL_CNT AS (
				SELECT COUNT(A.ORD_NO) AS CNT				
				FROM PO_ORDER_HDR AS A INNER JOIN (
							SELECT A.ORD_NO
								FROM PO_ORDER_HDR AS A	
									INNER JOIN PO_ORDER_DTL AS B ON A.ORD_NO = B.ORD_NO			
									--INNER JOIN CD_PRODUCT_CMN AS C ON B.SCAN_CODE = C.SCAN_CODE		
									--INNER JOIN CD_PARTNER_MST AS D ON A.VEN_CODE = D.VEN_CODE
									WHERE 1=(CASE WHEN @P_IO_GB = 'I' THEN 2 ELSE 1 END)	
										AND 1 = (CASE WHEN @P_ORD_NO = '' THEN 1 WHEN @P_ORD_NO <> '' AND A.ORD_NO LIKE '%'+@P_ORD_NO+'%' THEN 1 ELSE 0 END ) 
										AND A.ORD_DT BETWEEN  @P_S_ORD_DT AND @P_E_ORD_DT							 
										AND 1 = (CASE WHEN @P_VEN_CODE = '' THEN 1 WHEN  @P_VEN_CODE <> '' AND @P_VEN_CODE = A.VEN_CODE THEN 1 ELSE 0 END )
										AND 1 = (CASE WHEN @P_ORD_STAT = '' THEN 1 WHEN @P_ORD_STAT <> '' AND A.ORD_STAT = @P_ORD_STAT THEN 1 ELSE 0 END )
										AND 1 = (CASE WHEN @P_S_DELIVERY_REQ_DT = ''  OR @P_E_DELIVERY_REQ_DT = '' THEN 1 
														WHEN A.DELIVERY_REQ_DT BETWEEN @P_S_DELIVERY_REQ_DT AND @P_E_DELIVERY_REQ_DT THEN 1 ELSE  0 END )		
										AND 1 = (CASE WHEN @P_SCAN_CODE = '' THEN 1 WHEN @P_SCAN_CODE <> '' AND B.SCAN_CODE = @P_SCAN_CODE THEN 1 ELSE 0 END) 																									
							GROUP BY A.ORD_NO
				) B ON A.ORD_NO = B.ORD_NO						
				UNION ALL
				SELECT COUNT(*) AS CNT
				FROM PO_PURCHASE_HDR AS A INNER JOIN (
						SELECT A.ORD_NO
							FROM PO_PURCHASE_HDR AS A	
								INNER JOIN PO_PURCHASE_DTL AS B ON A.ORD_NO = B.ORD_NO
								--INNER JOIN CD_PRODUCT_CMN AS C ON B.SCAN_CODE = C.SCAN_CODE		
								--INNER JOIN CD_PARTNER_MST AS D ON A.VEN_CODE = D.VEN_CODE
								WHERE 1 = (CASE WHEN @P_IO_GB = 'O' THEN 2 ELSE 1 END)	
									AND 1 = (CASE WHEN @P_ORD_NO = '' THEN 1 WHEN @P_ORD_NO <> '' AND A.ORD_NO LIKE '%'+@P_ORD_NO+'%' THEN 1 ELSE 0 END ) 
									AND A.ORD_DT BETWEEN  @P_S_ORD_DT AND @P_E_ORD_DT							 
									AND 1 = (CASE WHEN @P_VEN_CODE = '' THEN 1 WHEN  @P_VEN_CODE <> '' AND @P_VEN_CODE = A.VEN_CODE THEN 1 ELSE 0 END )
									AND 1 = (CASE WHEN @P_SCAN_CODE = '' THEN 1 WHEN @P_SCAN_CODE <> '' AND B.SCAN_CODE = @P_SCAN_CODE THEN 1 ELSE 0 END) 		
						GROUP BY A.ORD_NO
			) B ON A.ORD_NO = B.ORD_NO	 
			
		) 		
		-- TOTLA COUNT 변수 SET
		SELECT @TOT_CNT = SUM(CNT) FROM TOTAL_CNT;
		
		-- # LIST #	
		WITH LIST AS (
				SELECT 
					'O' AS IO_GB
					, A.ORD_NO
					, A.VEN_CODE
					, A.R_ADDR
					, A.R_ADDR_DTL		
					, A.ORD_STAT AS IO_STAT
					, B.ITM_CNT
					, B.SCAN_CODE
					, A.DELIVERY_CODE
					, C.DELIVERY_NAME
					, D.TRANS_GB
					, D.TRANS_SECTION			
					, E.CD_NM AS IO_STAT_NM
					, F.CD_NM AS TRANS_GB_NM
				FROM PO_ORDER_HDR AS A INNER JOIN (
							SELECT A.ORD_NO, COUNT(A.ORD_NO) AS ITM_CNT, MAX(B.SCAN_CODE) AS SCAN_CODE
								FROM PO_ORDER_HDR AS A	
									INNER JOIN PO_ORDER_DTL AS B ON A.ORD_NO = B.ORD_NO
									--INNER JOIN CD_PRODUCT_CMN AS C ON B.SCAN_CODE = C.SCAN_CODE		
									--INNER JOIN CD_PARTNER_MST AS D ON A.VEN_CODE = D.VEN_CODE
									WHERE 1=(CASE WHEN @P_IO_GB = 'I' THEN 2 ELSE 1 END)	
										AND 1 = (CASE WHEN @P_ORD_NO = '' THEN 1 WHEN @P_ORD_NO <> '' AND A.ORD_NO LIKE '%'+@P_ORD_NO+'%' THEN 1 ELSE 0 END ) 
										AND A.ORD_DT BETWEEN  @P_S_ORD_DT AND @P_E_ORD_DT							 
										AND 1 = (CASE WHEN @P_VEN_CODE = '' THEN 1 WHEN  @P_VEN_CODE <> '' AND @P_VEN_CODE = A.VEN_CODE THEN 1 ELSE 0 END )
										AND 1 = (CASE WHEN @P_ORD_STAT = '' THEN 1 WHEN @P_ORD_STAT <> '' AND A.ORD_STAT = @P_ORD_STAT THEN 1 ELSE 0 END )
										AND 1 = (CASE WHEN @P_S_DELIVERY_REQ_DT = ''  OR @P_E_DELIVERY_REQ_DT = '' THEN 1 
														WHEN A.DELIVERY_REQ_DT BETWEEN @P_S_DELIVERY_REQ_DT AND @P_E_DELIVERY_REQ_DT THEN 1 ELSE  0 END )		
										AND 1 = (CASE WHEN @P_SCAN_CODE = '' THEN 1 WHEN @P_SCAN_CODE <> '' AND B.SCAN_CODE = @P_SCAN_CODE THEN 1 ELSE 0 END) 
							GROUP BY A.ORD_NO
				) B ON A.ORD_NO = B.ORD_NO
				LEFT OUTER JOIN CD_PARTNER_DELIVERY AS C ON A.VEN_CODE = C.VEN_CODE AND A.DELIVERY_CODE = C.DELIVERY_CODE 
				LEFT OUTER JOIN CD_DELIVERY_PRICE AS D ON C.DELIVERY_PRICE_SEQ = D.SEQ
				LEFT OUTER JOIN TBL_COMM_CD_MST AS E ON  E.CD_CL = 'ORD_STAT' AND A.ORD_STAT = E.CD_ID
				LEFT OUTER JOIN TBL_COMM_CD_MST AS F ON  F.CD_CL = 'TRANS_GB' AND D.TRANS_GB = F.CD_ID
			
			UNION ALL

				SELECT 
					'I' AS IO_GB
					, A.ORD_NO
					, A.VEN_CODE
					, A.R_ADDR
					, A.R_ADDR_DTL	
					, A.PUR_STAT AS IO_STAT
					, B.ITM_CNT
					, B.SCAN_CODE
					, A.DELIVERY_CODE
					, C.DELIVERY_NAME
					, D.TRANS_GB
					, D.TRANS_SECTION			
					, E.CD_NM AS IO_STAT_NM
					, F.CD_NM AS TRANS_GB_NM
				FROM PO_PURCHASE_HDR AS A INNER JOIN (
						SELECT A.ORD_NO, COUNT(A.ORD_NO) AS ITM_CNT, MAX(B.SCAN_CODE) AS SCAN_CODE
							FROM PO_PURCHASE_HDR AS A	
								INNER JOIN PO_PURCHASE_DTL AS B ON A.ORD_NO = B.ORD_NO
								--INNER JOIN CD_PRODUCT_CMN AS C ON B.SCAN_CODE = C.SCAN_CODE		
								--INNER JOIN CD_PARTNER_MST AS D ON A.VEN_CODE = D.VEN_CODE
								WHERE 1 = (CASE WHEN @P_IO_GB = 'O' THEN 2 ELSE 1 END)	
									AND 1 = (CASE WHEN @P_ORD_NO = '' THEN 1 WHEN @P_ORD_NO <> '' AND A.ORD_NO LIKE '%'+@P_ORD_NO+'%' THEN 1 ELSE 0 END ) 
									AND A.ORD_DT BETWEEN  @P_S_ORD_DT AND @P_E_ORD_DT							 
									AND 1 = (CASE WHEN @P_VEN_CODE = '' THEN 1 WHEN  @P_VEN_CODE <> '' AND @P_VEN_CODE = A.VEN_CODE THEN 1 ELSE 0 END )
									AND 1 = (CASE WHEN @P_SCAN_CODE = '' THEN 1 WHEN @P_SCAN_CODE <> '' AND B.SCAN_CODE = @P_SCAN_CODE THEN 1 ELSE 0 END) 						
						GROUP BY A.ORD_NO
			) B ON A.ORD_NO = B.ORD_NO	 
			LEFT OUTER JOIN CD_PARTNER_DELIVERY AS C ON A.VEN_CODE = C.VEN_CODE AND A.DELIVERY_CODE = C.DELIVERY_CODE 
			LEFT OUTER JOIN CD_DELIVERY_PRICE AS D ON C.DELIVERY_PRICE_SEQ = D.SEQ
			LEFT OUTER JOIN TBL_COMM_CD_MST AS E ON  E.CD_CL = 'PUR_STAT' AND A.PUR_STAT = E.CD_ID
			LEFT OUTER JOIN TBL_COMM_CD_MST AS F ON  F.CD_CL = 'TRANS_GB' AND D.TRANS_GB = F.CD_ID
		)  

		SELECT ROW_NUMBER() OVER(ORDER BY A.IO_GB DESC, A.ORD_NO DESC) AS ROW_NUM
			--, COUNT(*) OVER(PARTITION BY 1) AS TOT_CNT2
			, @TOT_CNT AS TOT_CNT
			, (CASE WHEN A.IO_GB = 'I' THEN '입고'  WHEN A.IO_GB = 'O' THEN '출고'  END) AS  IO_GB
			, A.ORD_NO
			, A.VEN_CODE
			, B.VEN_NAME			
			, C.ITM_NAME + (CASE WHEN A.ITM_CNT > 1 THEN ' 외 ' + CAST(A.ITM_CNT - 1 AS VARCHAR) + '건' ELSE '' END) AS ITM_NAME						
			, A.DELIVERY_NAME
			, A.R_ADDR
			, A.R_ADDR_DTL	
			, A.IO_STAT			
			, A.IO_STAT_NM
			, A.TRANS_GB
			, A.TRANS_SECTION
			, A.TRANS_GB_NM
			, ISNULL(F.CAR_NO, '') AS CAR_NO
			, F.TRANS_COST
			, F.RENT_COST
			, G.GROUP_NO
		FROM LIST AS A
			LEFT OUTER JOIN CD_PARTNER_MST AS B ON A.VEN_CODE = B.VEN_CODE
			LEFT OUTER JOIN CD_PRODUCT_CMN AS C ON A.SCAN_CODE = C.SCAN_CODE			
			LEFT OUTER JOIN PO_SCALE AS F ON A.ORD_NO = F.ORD_NO	
			LEFT OUTER JOIN PO_SCALE_GROUP AS G ON A.ORD_NO = G.ORD_NO
				WHERE 1 = (CASE WHEN @P_CAR_NO = '' THEN 1 WHEN @P_CAR_NO <> '' AND  F.CAR_NO LIKE '%'+@P_CAR_NO+'%' THEN 1 ELSE 0 END )							
		ORDER BY A.IO_GB DESC, A.ORD_NO DESC
		OFFSET @P_PAGE_INDEX ROW
		FETCH NEXT @P_TOT_PAGE_ROW ROWS ONLY;
	
		
	END TRY
	
	BEGIN CATCH		
		--에러 로그 테이블 저장
		INSERT INTO TBL_ERROR_LOG 
		SELECT ERROR_PROCEDURE()	-- 프로시저명
		, ERROR_MESSAGE()			-- 에러메시지
		, ERROR_LINE()				-- 에러라인
		, GETDATE()	
	END CATCH
	
END

GO

