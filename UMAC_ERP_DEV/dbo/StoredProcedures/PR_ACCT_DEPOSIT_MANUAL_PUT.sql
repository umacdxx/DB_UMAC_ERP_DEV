
/*

-- 생성자 :	이동호
-- 등록일 :	2024.05.23
-- 수정자 : 이동호
-- 수정일 : 2024.12.13
-- 수정내용 : CMS 일반계좌 입금 관리 테이블 매칭시 MOID 업데이트 항목 추가
-- 설 명  : 입금내역 수동 등록
-- 실행문 : 

*/
CREATE PROCEDURE [dbo].[PR_ACCT_DEPOSIT_MANUAL_PUT]
( 
	
	@P_JSONDT			VARCHAR(MAX) = '',
	@P_EMP_ID			VARCHAR(20),				-- 아이디
	@R_RETURN_CODE 		INT 			OUTPUT,		-- 리턴코드
	@R_RETURN_MESSAGE 	NVARCHAR(2000) 	OUTPUT 		-- 리턴메시지
)
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	DECLARE @RETURN_CODE INT = 0									-- 리턴코드(저장완료)
	DECLARE @RETURN_MESSAGE NVARCHAR(MAX) = DBO.GET_ERR_MSG('0')	-- 리턴메시지
	DECLARE @R_MOID NVARCHAR(100);	--신규주문아이디		

	SET @R_RETURN_CODE = @RETURN_CODE
	SET @R_RETURN_MESSAGE = @RETURN_MESSAGE	
	
	BEGIN TRAN
	BEGIN TRY 	
		
		--주문아이디 생성
		EXEC PR_ACCT_ORDER_RETURN_ID @R_MOID OUTPUT
		
		DECLARE @VEN_CODE NVARCHAR(7)
		DECLARE @MOID NVARCHAR(100)
		
		--@P_JSONDT JSON 데이터 변환 테이블
		DECLARE @DEPOSIT_JS_LIST TABLE (
			MOID NVARCHAR(100),
			DEPOSIT_DT NVARCHAR(11),
			VEN_CODE NVARCHAR(7),
			DEPOSIT_GB NVARCHAR(2),
			DEPOSIT_AMT NUMERIC(17,4),
			DEPOSIT_NO NVARCHAR(11),
			APP_NO NVARCHAR(18),
			ISSUER_CODE NVARCHAR(5),
			MODE NVARCHAR(1),
			CMS_SEQ INT,
			IDATE DATETIME
		)

		--재조정 입금 내역 테이블
		CREATE TABLE #DEPOSIT_LIST (
			MOID NVARCHAR(100),
			DEPOSIT_DT NVARCHAR(11),
			VEN_CODE NVARCHAR(7),
			DEPOSIT_GB NVARCHAR(2),
			DEPOSIT_AMT NUMERIC(17,4),
			DEPOSIT_NO NVARCHAR(11),
			APP_NO NVARCHAR(18),
			ISSUER_CODE NVARCHAR(5),
			MODE NVARCHAR(1),		
			CMS_SEQ INT,
			IDATE DATETIME
		)
		
		INSERT INTO @DEPOSIT_JS_LIST
		SELECT 
				MOID, 
				DEPOSIT_DT, 
				VEN_CODE, 
				DEPOSIT_GB, 
				DEPOSIT_AMT, 
				ISNULL(DEPOSIT_NO,'') AS DEPOSIT_NO, 				
				ISNULL(APP_NO,'') AS APP_NO, 
				ISNULL(ISSUER_CODE,'') AS ISSUER_CODE, 
				ISNULL(MODE, '') AS MODE,
				ISNULL(CMS_SEQ, 0) AS CMS_SEQ,				
				IDATE
			FROM 
				OPENJSON ( @P_JSONDT )   
					WITH (    
						MOID NVARCHAR(100)			'$.MOID',
						DEPOSIT_DT NVARCHAR(11)		'$.DEPOSIT_DT',
						VEN_CODE NVARCHAR(7)		'$.VEN_CODE',
						DEPOSIT_GB NVARCHAR(2)		'$.DEPOSIT_GB_NAME',
						DEPOSIT_AMT NUMERIC(17,4)	'$.DEPOSIT_AMT',
						DEPOSIT_NO	NVARCHAR(11)	'$.DEPOSIT_NO',
						APP_NO	NVARCHAR(18)		'$.APP_NO',
						ISSUER_CODE	NVARCHAR(5)		'$.ISSUER_CODE',
						MODE		NVARCHAR(1)		'$.MODE',
						CMS_SEQ		INT				'$.CMS_SEQ',
						IDATE		DATETIME		'$.IDATE'
					)
					

		
		--해당 거래처의 입금 내역 데이터를 재조정 
		INSERT INTO #DEPOSIT_LIST
		SELECT 
			ISNULL(MOID, '') AS MOID, 
			DEPOSIT_DT, 
			VEN_CODE, 
			DEPOSIT_GB, 
			DEPOSIT_AMT, 
			ISNULL(DEPOSIT_NO, '') AS DEPOSIT_NO, 
			ISNULL(APP_NO, '') AS APP_NO, 
			ISSUER_CODE, 
			MODE,
			CMS_SEQ,
			IDATE
		FROM (			
			--수동 신규, 업데이트, 삭제 리스트
			SELECT 
					MOID, 
					DEPOSIT_DT, 
					VEN_CODE, 
					DEPOSIT_GB, 
					DEPOSIT_AMT, 
					DEPOSIT_NO, 
					APP_NO, 
					ISSUER_CODE, 
					MODE, 
					CMS_SEQ,
					(CASE WHEN MODE = 'I' THEN GETDATE() ELSE IDATE END) AS IDATE 
			FROM @DEPOSIT_JS_LIST WHERE MODE = 'I' OR MODE = 'U' OR MODE = 'D'
							
			UNION ALL 
			
			--입금 리스트
			SELECT  
				AD.MOID,		
				AD.DEPOSIT_DT,
				AD.VEN_CODE,
				AD.DEPOSIT_GB,
				AD.DEPOSIT_AMT,
				AD.DEPOSIT_NO,
				AD.APP_NO,
				AD.ISSUER_CODE,
				'' AS MODE,
				0 AS CMS_SEQ,
				AD.IDATE
			FROM PA_ACCT_DEPOSIT AS AD 
				INNER JOIN (SELECT VEN_CODE FROM @DEPOSIT_JS_LIST GROUP BY VEN_CODE) AS OT 
				ON AD.VEN_CODE = OT.VEN_CODE
				
		) TBL 
		
		DELETE #DEPOSIT_LIST WHERE MODE = '' AND MOID IN (SELECT MOID FROM @DEPOSIT_JS_LIST WHERE MODE = 'I' OR MODE = 'U' OR MODE = 'D' GROUP BY VEN_CODE, MOID)
		
		--SELECT * FROM @DEPOSIT_LIST

		--삭제 하기전 임금내역 데이타 LOG 테이블에 저장
		DELETE PA_ACCT_DEPOSIT_DEL_LOG WHERE IDATE <= DATEADD(DAY, -7, GETDATE())		
		INSERT INTO PA_ACCT_DEPOSIT_DEL_LOG (MOID, VEN_CODE, DEPOSIT_GB, DEPOSIT_NO, DEPOSIT_AMT, DEPOSIT_DT, DEPOSIT_FISH, ISSUER_CODE, CARD_NO, APP_NO, MODE, IDATE, IEMP_ID, NIDATE)
		SELECT DEP.MOID, DEP.VEN_CODE, DEP.DEPOSIT_GB, DEP.DEPOSIT_NO, DEP.DEPOSIT_AMT, DEP.DEPOSIT_DT, 'Y', DEP.ISSUER_CODE, '', DEP.APP_NO, DEP.MODE, IDATE, @P_EMP_ID, GETDATE() 
			FROM #DEPOSIT_LIST AS DEP 
	
		--해당 거래처의 기존 입금 내역 데이터 삭제
		DELETE PA_ACCT_DEPOSIT 
			FROM PA_ACCT_DEPOSIT AS DEP
				INNER JOIN #DEPOSIT_LIST AS OTMP ON DEP.VEN_CODE = OTMP.VEN_CODE
				AND DEP.DEPOSIT_NO = OTMP.DEPOSIT_NO
		
		--해당 거래처의 주문별 임금내역 데이터 삭제
		DELETE PA_ACCT_DEPOSIT_ORD 
			FROM PA_ACCT_DEPOSIT_ORD AS DORD
				INNER JOIN #DEPOSIT_LIST AS OTMP ON DORD.VEN_CODE = OTMP.VEN_CODE
				AND DORD.DEPOSIT_NO = OTMP.DEPOSIT_NO
				WHERE DORD.SALE_TOTAL_AMT = 0				
		--기존 ROW DATA 삭제 후 다시 생성 //

		UPDATE PA_ACCT_DEPOSIT_ORD SET DEPOSIT_FISH = 'N'
			FROM PA_ACCT_DEPOSIT_ORD AS DORD
				INNER JOIN #DEPOSIT_LIST AS OTMP ON DORD.VEN_CODE = OTMP.VEN_CODE
			--WHERE DORD.SALE_TOTAL_AMT > 0


		--입금 내역 리스트로 해당 거래처의 주문 입금액을 순차적으 차감 처리
		DECLARE CURSOR_DEPOT CURSOR FOR

			SELECT 
				ISNULL(MOID, '') AS MOID, 
				DEPOSIT_DT, 
				VEN_CODE, 
				DEPOSIT_GB, 
				DEPOSIT_AMT, 
				ISNULL(DEPOSIT_NO, ''), 
				ISNULL(APP_NO, '') AS APP_NO, 
				ISSUER_CODE, 
				ISNULL(MODE, '') AS MODE,
				ISNULL(CMS_SEQ, 0) AS CMS_SEQ,
				ISNULL(IDATE, GETDATE()) AS IDATE
			FROM #DEPOSIT_LIST 			
			ORDER BY IDATE ASC

		OPEN CURSOR_DEPOT

			DECLARE @P_MOID			NVARCHAR(100),
					@P_DEPOSIT_DT	NVARCHAR(11),
					@P_VEN_CODE		NVARCHAR(7),
					@P_DEPOSIT_GB	NVARCHAR(2),
					@P_DEPOSIT_AMT	NUMERIC(17,4),
					@P_DEPOSIT_NO	NVARCHAR(11),
					@P_APP_NO		NVARCHAR(18),
					@P_ISSUER_CODE	NVARCHAR(5),				
					@P_MODE			NVARCHAR(1),
					@P_CMS_SEQ		INT,
					@P_IDATE		DATETIME

		FETCH NEXT FROM CURSOR_DEPOT INTO @P_MOID, @P_DEPOSIT_DT, @P_VEN_CODE, @P_DEPOSIT_GB, @P_DEPOSIT_AMT, @P_DEPOSIT_NO, @P_APP_NO, @P_ISSUER_CODE, @P_MODE, @P_CMS_SEQ, @P_IDATE

		WHILE(@@FETCH_STATUS=0)

		BEGIN
			
			IF @P_DEPOSIT_AMT > 0 AND @P_MODE NOT IN('D')
			BEGIN
								
				--주문번호가 없을경우 신규 생성(수동 신규 입금등록 할 경우)
				IF @P_MOID = '' 				
					SET @R_MOID = CAST(@R_MOID AS BIGINT) + 1				
																
				--입금번호가 없을경우 신규 생성(수동 신규 입금등록 할 경우)				
				IF @P_DEPOSIT_NO = ''
					SET @P_DEPOSIT_NO = DBO.GET_DEPOSIT_NO(@P_DEPOSIT_DT)
								
				SET @MOID = (CASE WHEN @P_MOID <> '' THEN @P_MOID ELSE @R_MOID END)

				--입금내역 등록
				INSERT INTO PA_ACCT_DEPOSIT 
				(
					MOID, 
					VEN_CODE,
					DEPOSIT_GB,
					DEPOSIT_NO, 
					DEPOSIT_AMT, 
					DEPOSIT_DT, 
					ISSUER_CODE,
					DEPOSIT_FISH, 
					APP_NO,
					IDATE,
					IEMP_ID
				)
				VALUES
				(
					@MOID,					
					@P_VEN_CODE, 
					@P_DEPOSIT_GB, 
					@P_DEPOSIT_NO, 
					@P_DEPOSIT_AMT, 
					@P_DEPOSIT_DT, 
					@P_ISSUER_CODE,
					'Y',
					@P_APP_NO,
					@P_IDATE,
					@P_EMP_ID
				)

				-- CMS 일반계좌 입금 관리 테이블 매칭시 MOID 업데이트
				IF @P_CMS_SEQ > 0 
				BEGIN
					UPDATE HCMS_ACCT_TRSC_PTCL SET MOID = @MOID, CFM_DT = CONVERT(NVARCHAR, GETDATE(), 112), CFM_EMP_ID = @P_EMP_ID WHERE CMS_SEQ = @P_CMS_SEQ
				END

				--입금등록(카드입금) 해당 카드결제 사용으로 업데이트
				IF EXISTS(SELECT AUTHNMUNBER FROM TBL_TOSSPAY_XPAY WHERE AUTHNMUNBER = @P_APP_NO)
				BEGIN
					UPDATE TBL_TOSSPAY_XPAY SET USE_YN='Y' WHERE AUTHNMUNBER = @P_APP_NO
				END

				--#주문별 입금 등록				
				EXEC PR_ACCT_DEPOSIT_ORD_PUT @P_VEN_CODE, @P_DEPOSIT_GB, @P_DEPOSIT_AMT, @MOID, @P_DEPOSIT_NO, @P_DEPOSIT_DT, @P_IDATE, @R_RETURN_CODE OUT, @R_RETURN_MESSAGE OUT;


				--ERR 테스트
				--DECLARE @P INT = 0
				--SET @P = 1/0
				--ERR 테스트//

			END

			--입금등록(카드입금) 삭제시 해당 카드결제 미사용으로 업데이트
			IF @P_MODE IN('D') AND @P_APP_NO != '' 
			BEGIN 
				IF EXISTS(SELECT AUTHNMUNBER FROM TBL_TOSSPAY_XPAY WHERE AUTHNMUNBER = @P_APP_NO)
				BEGIN
					UPDATE TBL_TOSSPAY_XPAY SET USE_YN='N' WHERE AUTHNMUNBER = @P_APP_NO
				END
			END 

			FETCH NEXT FROM CURSOR_DEPOT INTO @P_MOID, @P_DEPOSIT_DT, @P_VEN_CODE, @P_DEPOSIT_GB, @P_DEPOSIT_AMT, @P_DEPOSIT_NO, @P_APP_NO, @P_ISSUER_CODE, @P_MODE, @P_CMS_SEQ, @P_IDATE

		END

		CLOSE CURSOR_DEPOT
		DEALLOCATE CURSOR_DEPOT

		IF OBJECT_ID('tempdb..#DEPOSIT_LIST') IS NOT NULL
		BEGIN    
			DROP TABLE #DEPOSIT_LIST
		END

		COMMIT;

	END TRY
	BEGIN CATCH	
				
		IF @@TRANCOUNT > 0
		BEGIN 
		
			ROLLBACK TRAN
		
			IF CURSOR_STATUS('global', 'CURSOR_DEPOT') >= 0
			BEGIN
				CLOSE CURSOR_DEPOT;
				DEALLOCATE CURSOR_DEPOT;
			END

			IF OBJECT_ID('tempdb..#DEPOSIT_LIST') IS NOT NULL
			BEGIN    
				DROP TABLE #DEPOSIT_LIST
			END
			
			--에러 로그 테이블 저장
			INSERT INTO TBL_ERROR_LOG 
			SELECT ERROR_PROCEDURE()			-- 프로시저명
					, ERROR_MESSAGE()			-- 에러메시지
					, ERROR_LINE()				-- 에러라인
					, GETDATE()	

			
			SET @R_RETURN_CODE = -1
			SET @R_RETURN_MESSAGE = ERROR_MESSAGE()
			
		END 
	END CATCH
	
END

GO

