
/*
-- 생성자 :	최수민
-- 등록일 :	2024.09.11
-- 설 명  : 매출입내역수정 수정 -> 집계 테이블에서 기존 수량 및 금액 차감하도록 처리
-- 수정자 :	2024.11.27 최수민 주문번호 ',' 콤마 구분자로 가져와 여러행 차감하도록 처리
-- 설 명  : 
-- 실행문 : DECLARE @RETURN_CODE		INT = 0										-- 리턴코드(저장완료)
			DECLARE @RETURN_MESSAGE		NVARCHAR(MAX) = DBO.GET_ERR_MSG('0')		-- 리턴메시지
			EXEC PR_AGGR_OIL_ITM_SALE_DEDUCT '2240909002', @RETURN_CODE OUT, @RETURN_MESSAGE OUT
*/
CREATE PROCEDURE [dbo].[PR_AGGR_OIL_ITM_SALE_DEDUCT]
(
	@P_ORD_NO				NVARCHAR(MAX),					-- 주문번호
	@R_RETURN_CODE 			INT 				OUTPUT,		-- 리턴코드
	@R_RETURN_MESSAGE 		NVARCHAR(10) 		OUTPUT 		-- 리턴메시지
)
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	BEGIN TRAN
	BEGIN TRY 
		
		DECLARE @ORD_NO_TABLE TABLE (ORD_NO NVARCHAR(11));
		
		INSERT INTO @ORD_NO_TABLE (ORD_NO)
		SELECT TRIM(value) 
		FROM STRING_SPLIT(@P_ORD_NO, ',');

	
		--########## 유종별 출고량 집계
		UPDATE AO
		SET 
			AO.AGGR_KG_QTY = AO.AGGR_KG_QTY - MS_AGGR.AGGR_KG_QTY,
			AO.AGGR_AMT = AO.AGGR_AMT - MS_AGGR.AGGR_AMT
		FROM AG_ORDER_OIL AS AO
		INNER JOIN (
			SELECT HDR.DELIVERY_DEC_DT AS AGGR_DT
				 , SUBSTRING(LOT.LOT_NO, 
							 CHARINDEX('-', LOT.LOT_NO) + 1, 
							 CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - CHARINDEX('-', LOT.LOT_NO) - 1) AS LOT_OIL_GB
				 , SUBSTRING(LOT.LOT_NO, 
							 CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1, 
							 CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1) - CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - 1) AS LOT_PARTNER_GB
				 , ISNULL(SUM(DTL.PICKING_QTY * ISNULL(CMN.NET_WEIGHT/1000,1)), 0) AS AGGR_KG_QTY
				 , ISNULL(SUM(DTL.PICKING_SAMT), 0) AS AGGR_AMT
			  FROM PO_ORDER_HDR AS HDR
			 INNER JOIN PO_ORDER_DTL AS DTL ON HDR.ORD_NO = DTL.ORD_NO
			 INNER JOIN (SELECT ORD_NO, SCAN_CODE, MIN(LOT_NO) AS LOT_NO FROM PO_ORDER_LOT GROUP BY ORD_NO, SCAN_CODE) AS LOT ON HDR.ORD_NO = LOT.ORD_NO AND DTL.SCAN_CODE = LOT.SCAN_CODE
			 INNER JOIN CD_PRODUCT_CMN AS CMN ON DTL.SCAN_CODE = CMN.SCAN_CODE
			 INNER JOIN @ORD_NO_TABLE AS ONT ON HDR.ORD_NO = ONT.ORD_NO
			 WHERE (LOT.LOT_NO <> '' AND LOT.LOT_NO IS NOT NULL)
			 GROUP BY HDR.DELIVERY_DEC_DT
					, SUBSTRING(LOT.LOT_NO, 
								CHARINDEX('-', LOT.LOT_NO) + 1, 
								CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - CHARINDEX('-', LOT.LOT_NO) - 1)
					, SUBSTRING(LOT.LOT_NO, 
								CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1, 
								CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1) - CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - 1)
		) AS MS_AGGR
		ON AO.AGGR_DT = MS_AGGR.AGGR_DT
		   AND AO.LOT_OIL_GB = MS_AGGR.LOT_OIL_GB
		   AND AO.LOT_PARTNER_GB = MS_AGGR.LOT_PARTNER_GB;



			
		--########## 제품별 출고량 집계
		UPDATE AO
		SET 
			AO.AGGR_EA_QTY = AO.AGGR_EA_QTY - MS_AGGR.AGGR_EA_QTY,
			AO.AGGR_KG_QTY = AO.AGGR_KG_QTY - MS_AGGR.AGGR_KG_QTY,
			AO.AGGR_AMT = AO.AGGR_AMT - MS_AGGR.AGGR_AMT
		FROM AG_ORDER_ITM AS AO
		INNER JOIN (
			SELECT HDR.DELIVERY_DEC_DT AS AGGR_DT
				 , DTL.SCAN_CODE
				 , CMN.WEIGHT_GB
				 , SUBSTRING(LOT.LOT_NO, 
							 CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1, 
							 CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1) - CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - 1) AS LOT_PARTNER_GB
				 , ISNULL(CASE WHEN CMN.WEIGHT_GB = 'QTY' THEN ISNULL(SUM(DTL.PICKING_QTY),0) ELSE 0 END, 0) AS AGGR_EA_QTY
				 , ISNULL(SUM(DTL.PICKING_QTY * ISNULL(CMN.NET_WEIGHT/1000,1)), 0) AS AGGR_KG_QTY
				 , ISNULL(SUM(DTL.PICKING_SAMT), 0) AS AGGR_AMT
			  FROM PO_ORDER_HDR AS HDR
			 INNER JOIN PO_ORDER_DTL AS DTL ON HDR.ORD_NO = DTL.ORD_NO
			 INNER JOIN (SELECT ORD_NO, SCAN_CODE, MIN(LOT_NO) AS LOT_NO FROM PO_ORDER_LOT GROUP BY ORD_NO, SCAN_CODE) AS LOT ON HDR.ORD_NO = LOT.ORD_NO AND DTL.SCAN_CODE = LOT.SCAN_CODE
			 INNER JOIN CD_PRODUCT_CMN AS CMN ON DTL.SCAN_CODE = CMN.SCAN_CODE
			 INNER JOIN @ORD_NO_TABLE AS ONT ON HDR.ORD_NO = ONT.ORD_NO
			 WHERE (LOT.LOT_NO <> '' AND LOT.LOT_NO IS NOT NULL)
			 GROUP BY HDR.DELIVERY_DEC_DT, DTL.SCAN_CODE, CMN.WEIGHT_GB
					, SUBSTRING(LOT.LOT_NO, 
								CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1, 
								CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1) - CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - 1)
		) AS MS_AGGR
		ON AO.AGGR_DT = MS_AGGR.AGGR_DT
		   AND AO.SCAN_CODE = MS_AGGR.SCAN_CODE
		   AND AO.LOT_PARTNER_GB = MS_AGGR.LOT_PARTNER_GB;



		

		--########## 매출 집계
		UPDATE AGS
		SET 
			AGS.AGGR_EA_AMT = AGS.AGGR_EA_AMT - MS_AGGR.AGGR_EA_AMT,
			AGS.AGGR_KG_AMT = AGS.AGGR_KG_AMT - MS_AGGR.AGGR_KG_AMT,
			AGS.AGGR_AMT = AGS.AGGR_AMT - MS_AGGR.AGGR_AMT
		FROM AG_SALE AS AGS
		INNER JOIN (
			SELECT HDR.DELIVERY_DEC_DT AS AGGR_DT
				 , SUBSTRING(LOT.LOT_NO, 
							 CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1, 
							 CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1) - CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - 1) AS LOT_PARTNER_GB
				 , SUM(ISNULL(CASE WHEN CMN.WEIGHT_GB = 'QTY' THEN DTL.PICKING_SAMT ELSE 0 END, 0)) AS AGGR_EA_AMT
				 , SUM(ISNULL(CASE WHEN CMN.WEIGHT_GB = 'WT'  THEN DTL.PICKING_SAMT ELSE 0 END, 0)) AS AGGR_KG_AMT
				 , ISNULL(SUM(DTL.PICKING_SAMT), 0) AS AGGR_AMT
			  FROM PO_ORDER_HDR AS HDR
			 INNER JOIN PO_ORDER_DTL AS DTL ON HDR.ORD_NO = DTL.ORD_NO
			 INNER JOIN (SELECT ORD_NO, SCAN_CODE, MIN(LOT_NO) AS LOT_NO FROM PO_ORDER_LOT GROUP BY ORD_NO, SCAN_CODE) AS LOT ON HDR.ORD_NO = LOT.ORD_NO AND DTL.SCAN_CODE = LOT.SCAN_CODE
			 INNER JOIN CD_PRODUCT_CMN AS CMN ON DTL.SCAN_CODE = CMN.SCAN_CODE
			 INNER JOIN @ORD_NO_TABLE AS ONT ON HDR.ORD_NO = ONT.ORD_NO
			 WHERE (LOT.LOT_NO <> '' AND LOT.LOT_NO IS NOT NULL)
			 GROUP BY HDR.DELIVERY_DEC_DT
					, SUBSTRING(LOT.LOT_NO, 
								CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1, 
								CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) + 1) - CHARINDEX('-', LOT.LOT_NO, CHARINDEX('-', LOT.LOT_NO) + 1) - 1)
		) AS MS_AGGR
		ON AGS.AGGR_DT = MS_AGGR.AGGR_DT
		   AND AGS.LOT_PARTNER_GB = MS_AGGR.LOT_PARTNER_GB;



			
		--########## 결과 저장
		SET @R_RETURN_CODE = 0 -- 저장완료
		SET @R_RETURN_MESSAGE = DBO.GET_ERR_MSG('0')	

			
		COMMIT;
	END TRY
	
	BEGIN CATCH		

		IF @@TRANCOUNT > 0
		BEGIN 
			ROLLBACK TRAN

			SET @R_RETURN_CODE = -1
			SET @R_RETURN_MESSAGE = ERROR_MESSAGE()
			
			--에러 로그 테이블 저장
			INSERT INTO TBL_ERROR_LOG 
			SELECT ERROR_PROCEDURE()	-- 프로시저명
			, ERROR_MESSAGE()			-- 에러메시지
			, ERROR_LINE()				-- 에러라인
			, GETDATE()	

		END 

	END CATCH

END

GO

